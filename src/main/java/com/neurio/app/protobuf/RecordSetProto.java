package com.neurio.app.protobuf;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recordset.proto

public final class RecordSetProto {
  private RecordSetProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RecordSetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RecordSet)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string sensorId = 1;</code>
     * @return Whether the sensorId field is set.
     */
    boolean hasSensorId();
    /**
     * <code>optional string sensorId = 1;</code>
     * @return The sensorId.
     */
    String getSensorId();
    /**
     * <code>optional string sensorId = 1;</code>
     * @return The bytes for sensorId.
     */
    com.google.protobuf.ByteString
        getSensorIdBytes();

    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    java.util.List<RecordSet.Record>
        getRecordList();
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    RecordSet.Record getRecord(int index);
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    int getRecordCount();
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    java.util.List<? extends RecordSet.RecordOrBuilder>
        getRecordOrBuilderList();
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    RecordSet.RecordOrBuilder getRecordOrBuilder(
            int index);
  }
  /**
   * <pre>
   * RecordSet
   * ///////////
   * </pre>
   *
   * Protobuf type {@code RecordSet}
   */
  public static final class RecordSet extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:RecordSet)
      RecordSetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RecordSet.newBuilder() to construct.
    private RecordSet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RecordSet() {
      sensorId_ = "";
      record_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new RecordSet();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RecordSet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              sensorId_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                record_ = new java.util.ArrayList<Record>();
                mutable_bitField0_ |= 0x00000002;
              }
              record_.add(
                  input.readMessage(Record.PARSER, extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          record_ = java.util.Collections.unmodifiableList(record_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return RecordSetProto.internal_static_RecordSet_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return RecordSetProto.internal_static_RecordSet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              RecordSet.class, Builder.class);
    }

    public interface RecordOrBuilder extends
        // @@protoc_insertion_point(interface_extends:RecordSet.Record)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * UTC timestamp (unix epoch) marking when this record was captured
       * </pre>
       *
       * <code>optional double timestamp = 1;</code>
       * @return Whether the timestamp field is set.
       */
      boolean hasTimestamp();
      /**
       * <pre>
       * UTC timestamp (unix epoch) marking when this record was captured
       * </pre>
       *
       * <code>optional double timestamp = 1;</code>
       * @return The timestamp.
       */
      double getTimestamp();

      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      java.util.List<Record.ChannelSample>
          getChannelList();
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      Record.ChannelSample getChannel(int index);
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      int getChannelCount();
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      java.util.List<? extends Record.ChannelSampleOrBuilder>
          getChannelOrBuilderList();
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      Record.ChannelSampleOrBuilder getChannelOrBuilder(
              int index);

      /**
       * <pre>
       * local system timestemp (arbitrary epoch) when this record was captured
       * </pre>
       *
       * <code>optional double systemTime = 5;</code>
       * @return Whether the systemTime field is set.
       */
      boolean hasSystemTime();
      /**
       * <pre>
       * local system timestemp (arbitrary epoch) when this record was captured
       * </pre>
       *
       * <code>optional double systemTime = 5;</code>
       * @return The systemTime.
       */
      double getSystemTime();

      /**
       * <pre>
       * Mode the inverter is in
       * </pre>
       *
       * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
       * @return Whether the sysMode field is set.
       */
      boolean hasSysMode();
      /**
       * <pre>
       * Mode the inverter is in
       * </pre>
       *
       * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
       * @return The sysMode.
       */
      Record.SysModeType getSysMode();

      /**
       * <pre>
       * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
       * </pre>
       *
       * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
       * @return Whether the inverterState field is set.
       */
      boolean hasInverterState();
      /**
       * <pre>
       * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
       * </pre>
       *
       * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
       * @return The inverterState.
       */
      Record.InverterStateType getInverterState();
    }
    /**
     * Protobuf type {@code RecordSet.Record}
     */
    public static final class Record extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:RecordSet.Record)
        RecordOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Record.newBuilder() to construct.
      private Record(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Record() {
        channel_ = java.util.Collections.emptyList();
        sysMode_ = 0;
        inverterState_ = 0;
      }

      @Override
      @SuppressWarnings({"unused"})
      protected Object newInstance(
          UnusedPrivateParameter unused) {
        return new Record();
      }

      @Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Record(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                bitField0_ |= 0x00000001;
                timestamp_ = input.readDouble();
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                  channel_ = new java.util.ArrayList<ChannelSample>();
                  mutable_bitField0_ |= 0x00000002;
                }
                channel_.add(
                    input.readMessage(ChannelSample.PARSER, extensionRegistry));
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                  @SuppressWarnings("deprecation")
                SysModeType value = SysModeType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  sysMode_ = rawValue;
                }
                break;
              }
              case 32: {
                int rawValue = input.readEnum();
                  @SuppressWarnings("deprecation")
                InverterStateType value = InverterStateType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(4, rawValue);
                } else {
                  bitField0_ |= 0x00000008;
                  inverterState_ = rawValue;
                }
                break;
              }
              case 41: {
                bitField0_ |= 0x00000002;
                systemTime_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) != 0)) {
            channel_ = java.util.Collections.unmodifiableList(channel_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RecordSetProto.internal_static_RecordSet_Record_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RecordSetProto.internal_static_RecordSet_Record_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Record.class, Builder.class);
      }

      /**
       * Protobuf enum {@code RecordSet.Record.SysModeType}
       */
      public enum SysModeType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>SAFETY_SHUTDOWN = 0;</code>
         */
        SAFETY_SHUTDOWN(0),
        /**
         * <code>GRID_TIE = 1;</code>
         */
        GRID_TIE(1),
        /**
         * <code>SELF_SUPPLY = 2;</code>
         */
        SELF_SUPPLY(2),
        /**
         * <code>CLEAN_BACKUP = 3;</code>
         */
        CLEAN_BACKUP(3),
        /**
         * <code>PRIORITY_BACKUP = 4;</code>
         */
        PRIORITY_BACKUP(4),
        /**
         * <code>REMOTE_ARBITRAGE = 5;</code>
         */
        REMOTE_ARBITRAGE(5),
        /**
         * <code>SELL = 6;</code>
         */
        SELL(6),
        ;

        /**
         * <code>SAFETY_SHUTDOWN = 0;</code>
         */
        public static final int SAFETY_SHUTDOWN_VALUE = 0;
        /**
         * <code>GRID_TIE = 1;</code>
         */
        public static final int GRID_TIE_VALUE = 1;
        /**
         * <code>SELF_SUPPLY = 2;</code>
         */
        public static final int SELF_SUPPLY_VALUE = 2;
        /**
         * <code>CLEAN_BACKUP = 3;</code>
         */
        public static final int CLEAN_BACKUP_VALUE = 3;
        /**
         * <code>PRIORITY_BACKUP = 4;</code>
         */
        public static final int PRIORITY_BACKUP_VALUE = 4;
        /**
         * <code>REMOTE_ARBITRAGE = 5;</code>
         */
        public static final int REMOTE_ARBITRAGE_VALUE = 5;
        /**
         * <code>SELL = 6;</code>
         */
        public static final int SELL_VALUE = 6;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static SysModeType valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static SysModeType forNumber(int value) {
          switch (value) {
            case 0: return SAFETY_SHUTDOWN;
            case 1: return GRID_TIE;
            case 2: return SELF_SUPPLY;
            case 3: return CLEAN_BACKUP;
            case 4: return PRIORITY_BACKUP;
            case 5: return REMOTE_ARBITRAGE;
            case 6: return SELL;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<SysModeType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            SysModeType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<SysModeType>() {
                public SysModeType findValueByNumber(int number) {
                  return SysModeType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return Record.getDescriptor().getEnumTypes().get(0);
        }

        private static final SysModeType[] VALUES = values();

        public static SysModeType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private SysModeType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:RecordSet.Record.SysModeType)
      }

      /**
       * Protobuf enum {@code RecordSet.Record.InverterStateType}
       */
      public enum InverterStateType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>UNKNOWN = 0;</code>
         */
        UNKNOWN(0),
        /**
         * <code>DISABLED = 16;</code>
         */
        DISABLED(16),
        /**
         * <code>INITIALIZING = 256;</code>
         */
        INITIALIZING(256),
        /**
         * <code>POWERING_UP = 272;</code>
         */
        POWERING_UP(272),
        /**
         * <code>CONNECTING_BUS = 288;</code>
         */
        CONNECTING_BUS(288),
        /**
         * <code>TESTING_BUS = 320;</code>
         */
        TESTING_BUS(320),
        /**
         * <code>LOW_BUS_VOLTAGE = 512;</code>
         */
        LOW_BUS_VOLTAGE(512),
        /**
         * <code>WAITING = 784;</code>
         */
        WAITING(784),
        /**
         * <code>CONNECTING_GRID = 2048;</code>
         */
        CONNECTING_GRID(2048),
        /**
         * <code>DISCONNECTING_GRID = 2064;</code>
         */
        DISCONNECTING_GRID(2064),
        /**
         * <code>GRID_CONNECTED = 2080;</code>
         */
        GRID_CONNECTED(2080),
        /**
         * <pre>
         * Look for this state to confirm inverter is islanded
         * </pre>
         *
         * <code>ISLANDED = 2096;</code>
         */
        ISLANDED(2096),
        /**
         * <code>GENERATOR_PARALLEL = 2128;</code>
         */
        GENERATOR_PARALLEL(2128),
        /**
         * <code>ERROR_GENERIC = 28672;</code>
         */
        ERROR_GENERIC(28672),
        /**
         * <code>ERROR_REBUS_FAULT = 29968;</code>
         */
        ERROR_REBUS_FAULT(29968),
        /**
         * <code>ERROR_INTERNAL_BUS_FAULT = 29984;</code>
         */
        ERROR_INTERNAL_BUS_FAULT(29984),
        /**
         * <code>CONFIGURATION_ERROR = 30464;</code>
         */
        CONFIGURATION_ERROR(30464),
        /**
         * <code>BAD_RESET_ERROR = 30480;</code>
         */
        BAD_RESET_ERROR(30480),
        /**
         * <code>GROUND_FAULT = 49152;</code>
         */
        GROUND_FAULT(49152),
        ;

        /**
         * <code>UNKNOWN = 0;</code>
         */
        public static final int UNKNOWN_VALUE = 0;
        /**
         * <code>DISABLED = 16;</code>
         */
        public static final int DISABLED_VALUE = 16;
        /**
         * <code>INITIALIZING = 256;</code>
         */
        public static final int INITIALIZING_VALUE = 256;
        /**
         * <code>POWERING_UP = 272;</code>
         */
        public static final int POWERING_UP_VALUE = 272;
        /**
         * <code>CONNECTING_BUS = 288;</code>
         */
        public static final int CONNECTING_BUS_VALUE = 288;
        /**
         * <code>TESTING_BUS = 320;</code>
         */
        public static final int TESTING_BUS_VALUE = 320;
        /**
         * <code>LOW_BUS_VOLTAGE = 512;</code>
         */
        public static final int LOW_BUS_VOLTAGE_VALUE = 512;
        /**
         * <code>WAITING = 784;</code>
         */
        public static final int WAITING_VALUE = 784;
        /**
         * <code>CONNECTING_GRID = 2048;</code>
         */
        public static final int CONNECTING_GRID_VALUE = 2048;
        /**
         * <code>DISCONNECTING_GRID = 2064;</code>
         */
        public static final int DISCONNECTING_GRID_VALUE = 2064;
        /**
         * <code>GRID_CONNECTED = 2080;</code>
         */
        public static final int GRID_CONNECTED_VALUE = 2080;
        /**
         * <pre>
         * Look for this state to confirm inverter is islanded
         * </pre>
         *
         * <code>ISLANDED = 2096;</code>
         */
        public static final int ISLANDED_VALUE = 2096;
        /**
         * <code>GENERATOR_PARALLEL = 2128;</code>
         */
        public static final int GENERATOR_PARALLEL_VALUE = 2128;
        /**
         * <code>ERROR_GENERIC = 28672;</code>
         */
        public static final int ERROR_GENERIC_VALUE = 28672;
        /**
         * <code>ERROR_REBUS_FAULT = 29968;</code>
         */
        public static final int ERROR_REBUS_FAULT_VALUE = 29968;
        /**
         * <code>ERROR_INTERNAL_BUS_FAULT = 29984;</code>
         */
        public static final int ERROR_INTERNAL_BUS_FAULT_VALUE = 29984;
        /**
         * <code>CONFIGURATION_ERROR = 30464;</code>
         */
        public static final int CONFIGURATION_ERROR_VALUE = 30464;
        /**
         * <code>BAD_RESET_ERROR = 30480;</code>
         */
        public static final int BAD_RESET_ERROR_VALUE = 30480;
        /**
         * <code>GROUND_FAULT = 49152;</code>
         */
        public static final int GROUND_FAULT_VALUE = 49152;


        public final int getNumber() {
          return value;
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static InverterStateType valueOf(int value) {
          return forNumber(value);
        }

        /**
         * @param value The numeric wire value of the corresponding enum entry.
         * @return The enum associated with the given numeric wire value.
         */
        public static InverterStateType forNumber(int value) {
          switch (value) {
            case 0: return UNKNOWN;
            case 16: return DISABLED;
            case 256: return INITIALIZING;
            case 272: return POWERING_UP;
            case 288: return CONNECTING_BUS;
            case 320: return TESTING_BUS;
            case 512: return LOW_BUS_VOLTAGE;
            case 784: return WAITING;
            case 2048: return CONNECTING_GRID;
            case 2064: return DISCONNECTING_GRID;
            case 2080: return GRID_CONNECTED;
            case 2096: return ISLANDED;
            case 2128: return GENERATOR_PARALLEL;
            case 28672: return ERROR_GENERIC;
            case 29968: return ERROR_REBUS_FAULT;
            case 29984: return ERROR_INTERNAL_BUS_FAULT;
            case 30464: return CONFIGURATION_ERROR;
            case 30480: return BAD_RESET_ERROR;
            case 49152: return GROUND_FAULT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<InverterStateType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            InverterStateType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<InverterStateType>() {
                public InverterStateType findValueByNumber(int number) {
                  return InverterStateType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return Record.getDescriptor().getEnumTypes().get(1);
        }

        private static final InverterStateType[] VALUES = values();

        public static InverterStateType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private InverterStateType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:RecordSet.Record.InverterStateType)
      }

      public interface ChannelSampleOrBuilder extends
          // @@protoc_insertion_point(interface_extends:RecordSet.Record.ChannelSample)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * ch
         * </pre>
         *
         * <code>optional uint32 channel = 1;</code>
         * @return Whether the channel field is set.
         */
        boolean hasChannel();
        /**
         * <pre>
         * ch
         * </pre>
         *
         * <code>optional uint32 channel = 1;</code>
         * @return The channel.
         */
        int getChannel();

        /**
         * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
         * @return Whether the channelType field is set.
         */
        boolean hasChannelType();
        /**
         * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
         * @return The channelType.
         */
        ChannelSample.ChannelType getChannelType();

        /**
         * <pre>
         * eExp_Ws
         * </pre>
         *
         * <code>optional uint64 exportedEnergy_Ws = 3;</code>
         * @return Whether the exportedEnergyWs field is set.
         */
        boolean hasExportedEnergyWs();
        /**
         * <pre>
         * eExp_Ws
         * </pre>
         *
         * <code>optional uint64 exportedEnergy_Ws = 3;</code>
         * @return The exportedEnergyWs.
         */
        long getExportedEnergyWs();

        /**
         * <pre>
         * eImp_Ws
         * </pre>
         *
         * <code>optional uint64 importedEnergy_Ws = 4;</code>
         * @return Whether the importedEnergyWs field is set.
         */
        boolean hasImportedEnergyWs();
        /**
         * <pre>
         * eImp_Ws
         * </pre>
         *
         * <code>optional uint64 importedEnergy_Ws = 4;</code>
         * @return The importedEnergyWs.
         */
        long getImportedEnergyWs();

        /**
         * <pre>
         * v_V
         * </pre>
         *
         * <code>optional float voltage_V = 5;</code>
         * @return Whether the voltageV field is set.
         */
        boolean hasVoltageV();
        /**
         * <pre>
         * v_V
         * </pre>
         *
         * <code>optional float voltage_V = 5;</code>
         * @return The voltageV.
         */
        float getVoltageV();

        /**
         * <pre>
         * q_VAR
         * </pre>
         *
         * <code>optional sint32 reactivePower_VAR = 6;</code>
         * @return Whether the reactivePowerVAR field is set.
         */
        boolean hasReactivePowerVAR();
        /**
         * <pre>
         * q_VAR
         * </pre>
         *
         * <code>optional sint32 reactivePower_VAR = 6;</code>
         * @return The reactivePowerVAR.
         */
        int getReactivePowerVAR();

        /**
         * <pre>
         * p_W
         * </pre>
         *
         * <code>optional sint32 realPower_W = 7;</code>
         * @return Whether the realPowerW field is set.
         */
        boolean hasRealPowerW();
        /**
         * <pre>
         * p_W
         * </pre>
         *
         * <code>optional sint32 realPower_W = 7;</code>
         * @return The realPowerW.
         */
        int getRealPowerW();

        /**
         * <pre>
         * (new!) always +ve, in VAR
         * </pre>
         *
         * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
         * @return Whether the widebandReactivePowerVAR field is set.
         */
        boolean hasWidebandReactivePowerVAR();
        /**
         * <pre>
         * (new!) always +ve, in VAR
         * </pre>
         *
         * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
         * @return The widebandReactivePowerVAR.
         */
        int getWidebandReactivePowerVAR();

        /**
         * <pre>
         * individual device ids
         * </pre>
         *
         * <code>optional string deviceId = 9;</code>
         * @return Whether the deviceId field is set.
         */
        boolean hasDeviceId();
        /**
         * <pre>
         * individual device ids
         * </pre>
         *
         * <code>optional string deviceId = 9;</code>
         * @return The deviceId.
         */
        String getDeviceId();
        /**
         * <pre>
         * individual device ids
         * </pre>
         *
         * <code>optional string deviceId = 9;</code>
         * @return The bytes for deviceId.
         */
        com.google.protobuf.ByteString
            getDeviceIdBytes();

        /**
         * <pre>
         * Battery, Solar, Inverter, Generator
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
         * @return Whether the deviceType field is set.
         */
        boolean hasDeviceType();
        /**
         * <pre>
         * Battery, Solar, Inverter, Generator
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
         * @return The deviceType.
         */
        ChannelSample.DeviceType getDeviceType();

        /**
         * <pre>
         * Aggregated or Raw
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
         * @return Whether the aggregateLevel field is set.
         */
        boolean hasAggregateLevel();
        /**
         * <pre>
         * Aggregated or Raw
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
         * @return The aggregateLevel.
         */
        ChannelSample.AggregationLevel getAggregateLevel();

        /**
         * <pre>
         * battery percentage, 1 dec.
         * </pre>
         *
         * <code>optional float SoC = 12;</code>
         * @return Whether the soC field is set.
         */
        boolean hasSoC();
        /**
         * <pre>
         * battery percentage, 1 dec.
         * </pre>
         *
         * <code>optional float SoC = 12;</code>
         * @return The soC.
         */
        float getSoC();

        /**
         * <pre>
         * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
         * </pre>
         *
         * <code>optional bool isRevenueGrade = 13;</code>
         * @return Whether the isRevenueGrade field is set.
         */
        boolean hasIsRevenueGrade();
        /**
         * <pre>
         * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
         * </pre>
         *
         * <code>optional bool isRevenueGrade = 13;</code>
         * @return The isRevenueGrade.
         */
        boolean getIsRevenueGrade();

        /**
         * <pre>
         * q_VAR as a float
         * </pre>
         *
         * <code>optional float reactivePower_VARf = 14;</code>
         * @return Whether the reactivePowerVARf field is set.
         */
        boolean hasReactivePowerVARf();
        /**
         * <pre>
         * q_VAR as a float
         * </pre>
         *
         * <code>optional float reactivePower_VARf = 14;</code>
         * @return The reactivePowerVARf.
         */
        float getReactivePowerVARf();

        /**
         * <pre>
         * p_W as a float
         * </pre>
         *
         * <code>optional float realPower_Wf = 15;</code>
         * @return Whether the realPowerWf field is set.
         */
        boolean hasRealPowerWf();
        /**
         * <pre>
         * p_W as a float
         * </pre>
         *
         * <code>optional float realPower_Wf = 15;</code>
         * @return The realPowerWf.
         */
        float getRealPowerWf();

        /**
         * <pre>
         * (Same value as LoadConfig.label for Octopus)
         * </pre>
         *
         * <code>optional string label = 16;</code>
         * @return Whether the label field is set.
         */
        boolean hasLabel();
        /**
         * <pre>
         * (Same value as LoadConfig.label for Octopus)
         * </pre>
         *
         * <code>optional string label = 16;</code>
         * @return The label.
         */
        String getLabel();
        /**
         * <pre>
         * (Same value as LoadConfig.label for Octopus)
         * </pre>
         *
         * <code>optional string label = 16;</code>
         * @return The bytes for label.
         */
        com.google.protobuf.ByteString
            getLabelBytes();
      }
      /**
       * Protobuf type {@code RecordSet.Record.ChannelSample}
       */
      public static final class ChannelSample extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:RecordSet.Record.ChannelSample)
          ChannelSampleOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use ChannelSample.newBuilder() to construct.
        private ChannelSample(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private ChannelSample() {
          channelType_ = 0;
          deviceId_ = "";
          deviceType_ = 0;
          aggregateLevel_ = 0;
          label_ = "";
        }

        @Override
        @SuppressWarnings({"unused"})
        protected Object newInstance(
            UnusedPrivateParameter unused) {
          return new ChannelSample();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private ChannelSample(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 8: {
                  bitField0_ |= 0x00000001;
                  channel_ = input.readUInt32();
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                    @SuppressWarnings("deprecation")
                  ChannelType value = ChannelType.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    channelType_ = rawValue;
                  }
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  exportedEnergyWs_ = input.readUInt64();
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  importedEnergyWs_ = input.readUInt64();
                  break;
                }
                case 45: {
                  bitField0_ |= 0x00000010;
                  voltageV_ = input.readFloat();
                  break;
                }
                case 48: {
                  bitField0_ |= 0x00000020;
                  reactivePowerVAR_ = input.readSInt32();
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000040;
                  realPowerW_ = input.readSInt32();
                  break;
                }
                case 64: {
                  bitField0_ |= 0x00000080;
                  widebandReactivePowerVAR_ = input.readUInt32();
                  break;
                }
                case 74: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  bitField0_ |= 0x00000100;
                  deviceId_ = bs;
                  break;
                }
                case 80: {
                  int rawValue = input.readEnum();
                    @SuppressWarnings("deprecation")
                  DeviceType value = DeviceType.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(10, rawValue);
                  } else {
                    bitField0_ |= 0x00000200;
                    deviceType_ = rawValue;
                  }
                  break;
                }
                case 88: {
                  int rawValue = input.readEnum();
                    @SuppressWarnings("deprecation")
                  AggregationLevel value = AggregationLevel.valueOf(rawValue);
                  if (value == null) {
                    unknownFields.mergeVarintField(11, rawValue);
                  } else {
                    bitField0_ |= 0x00000400;
                    aggregateLevel_ = rawValue;
                  }
                  break;
                }
                case 101: {
                  bitField0_ |= 0x00000800;
                  soC_ = input.readFloat();
                  break;
                }
                case 104: {
                  bitField0_ |= 0x00001000;
                  isRevenueGrade_ = input.readBool();
                  break;
                }
                case 117: {
                  bitField0_ |= 0x00002000;
                  reactivePowerVARf_ = input.readFloat();
                  break;
                }
                case 125: {
                  bitField0_ |= 0x00004000;
                  realPowerWf_ = input.readFloat();
                  break;
                }
                case 130: {
                  com.google.protobuf.ByteString bs = input.readBytes();
                  bitField0_ |= 0x00008000;
                  label_ = bs;
                  break;
                }
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return RecordSetProto.internal_static_RecordSet_Record_ChannelSample_descriptor;
        }

        @Override
        protected FieldAccessorTable
            internalGetFieldAccessorTable() {
          return RecordSetProto.internal_static_RecordSet_Record_ChannelSample_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ChannelSample.class, Builder.class);
        }

        /**
         * <pre>
         * this enumeration describes common
         * </pre>
         *
         * Protobuf enum {@code RecordSet.Record.ChannelSample.ChannelType}
         */
        public enum ChannelType
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <pre>
           *  'logical' points of measure in a
           *  site's electrical system.
           * </pre>
           *
           * <code>NET = 0;</code>
           */
          NET(0),
          /**
           * <pre>
           * output of all generation equipment at a site (e.g. solar, wind)
           * </pre>
           *
           * <code>GENERATION = 1;</code>
           */
          GENERATION(1),
          /**
           * <pre>
           * consumption of all loads at a site
           * </pre>
           *
           * <code>CONSUMPTION = 2;</code>
           */
          CONSUMPTION(2),
          /**
           * <pre>
           * consumption of loads on phase A in a multi-phase electrical service
           * </pre>
           *
           * <code>PHASE_A_CONSUMPTION = 3;</code>
           */
          PHASE_A_CONSUMPTION(3),
          /**
           * <pre>
           * consumption of loads on phase B in a multi-phase electrical service
           * </pre>
           *
           * <code>PHASE_B_CONSUMPTION = 4;</code>
           */
          PHASE_B_CONSUMPTION(4),
          /**
           * <pre>
           * consumption of loads on phase C in a multi-phase electrical service
           * </pre>
           *
           * <code>PHASE_C_CONSUMPTION = 5;</code>
           */
          PHASE_C_CONSUMPTION(5),
          /**
           * <pre>
           * generic measurement point for any purpose (e.g. submetering individual appliances)
           * </pre>
           *
           * <code>SUBMETER = 6;</code>
           */
          SUBMETER(6),
          /**
           * <pre>
           * aggregate output of site's AC inverters; would be equivalent (less efficiency
           * </pre>
           *
           * <code>INVERTER_OUTPUT = 7;</code>
           */
          INVERTER_OUTPUT(7),
          ;

          /**
           * <pre>
           *  'logical' points of measure in a
           *  site's electrical system.
           * </pre>
           *
           * <code>NET = 0;</code>
           */
          public static final int NET_VALUE = 0;
          /**
           * <pre>
           * output of all generation equipment at a site (e.g. solar, wind)
           * </pre>
           *
           * <code>GENERATION = 1;</code>
           */
          public static final int GENERATION_VALUE = 1;
          /**
           * <pre>
           * consumption of all loads at a site
           * </pre>
           *
           * <code>CONSUMPTION = 2;</code>
           */
          public static final int CONSUMPTION_VALUE = 2;
          /**
           * <pre>
           * consumption of loads on phase A in a multi-phase electrical service
           * </pre>
           *
           * <code>PHASE_A_CONSUMPTION = 3;</code>
           */
          public static final int PHASE_A_CONSUMPTION_VALUE = 3;
          /**
           * <pre>
           * consumption of loads on phase B in a multi-phase electrical service
           * </pre>
           *
           * <code>PHASE_B_CONSUMPTION = 4;</code>
           */
          public static final int PHASE_B_CONSUMPTION_VALUE = 4;
          /**
           * <pre>
           * consumption of loads on phase C in a multi-phase electrical service
           * </pre>
           *
           * <code>PHASE_C_CONSUMPTION = 5;</code>
           */
          public static final int PHASE_C_CONSUMPTION_VALUE = 5;
          /**
           * <pre>
           * generic measurement point for any purpose (e.g. submetering individual appliances)
           * </pre>
           *
           * <code>SUBMETER = 6;</code>
           */
          public static final int SUBMETER_VALUE = 6;
          /**
           * <pre>
           * aggregate output of site's AC inverters; would be equivalent (less efficiency
           * </pre>
           *
           * <code>INVERTER_OUTPUT = 7;</code>
           */
          public static final int INVERTER_OUTPUT_VALUE = 7;


          public final int getNumber() {
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @Deprecated
          public static ChannelType valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static ChannelType forNumber(int value) {
            switch (value) {
              case 0: return NET;
              case 1: return GENERATION;
              case 2: return CONSUMPTION;
              case 3: return PHASE_A_CONSUMPTION;
              case 4: return PHASE_B_CONSUMPTION;
              case 5: return PHASE_C_CONSUMPTION;
              case 6: return SUBMETER;
              case 7: return INVERTER_OUTPUT;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<ChannelType>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              ChannelType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ChannelType>() {
                  public ChannelType findValueByNumber(int number) {
                    return ChannelType.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return ChannelSample.getDescriptor().getEnumTypes().get(0);
          }

          private static final ChannelType[] VALUES = values();

          public static ChannelType valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private ChannelType(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:RecordSet.Record.ChannelSample.ChannelType)
        }

        /**
         * Protobuf enum {@code RecordSet.Record.ChannelSample.DeviceType}
         */
        public enum DeviceType
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <code>BATTERY = 0;</code>
           */
          BATTERY(0),
          /**
           * <code>SOLAR = 1;</code>
           */
          SOLAR(1),
          /**
           * <code>INVERTER = 2;</code>
           */
          INVERTER(2),
          /**
           * <code>GENERATOR = 3;</code>
           */
          GENERATOR(3),
          /**
           * <code>OCTOPUS = 4;</code>
           */
          OCTOPUS(4),
          ;

          /**
           * <code>BATTERY = 0;</code>
           */
          public static final int BATTERY_VALUE = 0;
          /**
           * <code>SOLAR = 1;</code>
           */
          public static final int SOLAR_VALUE = 1;
          /**
           * <code>INVERTER = 2;</code>
           */
          public static final int INVERTER_VALUE = 2;
          /**
           * <code>GENERATOR = 3;</code>
           */
          public static final int GENERATOR_VALUE = 3;
          /**
           * <code>OCTOPUS = 4;</code>
           */
          public static final int OCTOPUS_VALUE = 4;


          public final int getNumber() {
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @Deprecated
          public static DeviceType valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static DeviceType forNumber(int value) {
            switch (value) {
              case 0: return BATTERY;
              case 1: return SOLAR;
              case 2: return INVERTER;
              case 3: return GENERATOR;
              case 4: return OCTOPUS;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<DeviceType>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              DeviceType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<DeviceType>() {
                  public DeviceType findValueByNumber(int number) {
                    return DeviceType.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return ChannelSample.getDescriptor().getEnumTypes().get(1);
          }

          private static final DeviceType[] VALUES = values();

          public static DeviceType valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private DeviceType(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:RecordSet.Record.ChannelSample.DeviceType)
        }

        /**
         * Protobuf enum {@code RecordSet.Record.ChannelSample.AggregationLevel}
         */
        public enum AggregationLevel
            implements com.google.protobuf.ProtocolMessageEnum {
          /**
           * <pre>
           * from individual device
           * </pre>
           *
           * <code>RAW = 0;</code>
           */
          RAW(0),
          /**
           * <pre>
           * from a group of device
           * </pre>
           *
           * <code>AGGREGATED = 1;</code>
           */
          AGGREGATED(1),
          ;

          /**
           * <pre>
           * from individual device
           * </pre>
           *
           * <code>RAW = 0;</code>
           */
          public static final int RAW_VALUE = 0;
          /**
           * <pre>
           * from a group of device
           * </pre>
           *
           * <code>AGGREGATED = 1;</code>
           */
          public static final int AGGREGATED_VALUE = 1;


          public final int getNumber() {
            return value;
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           * @deprecated Use {@link #forNumber(int)} instead.
           */
          @Deprecated
          public static AggregationLevel valueOf(int value) {
            return forNumber(value);
          }

          /**
           * @param value The numeric wire value of the corresponding enum entry.
           * @return The enum associated with the given numeric wire value.
           */
          public static AggregationLevel forNumber(int value) {
            switch (value) {
              case 0: return RAW;
              case 1: return AGGREGATED;
              default: return null;
            }
          }

          public static com.google.protobuf.Internal.EnumLiteMap<AggregationLevel>
              internalGetValueMap() {
            return internalValueMap;
          }
          private static final com.google.protobuf.Internal.EnumLiteMap<
              AggregationLevel> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<AggregationLevel>() {
                  public AggregationLevel findValueByNumber(int number) {
                    return AggregationLevel.forNumber(number);
                  }
                };

          public final com.google.protobuf.Descriptors.EnumValueDescriptor
              getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
          }
          public final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptorForType() {
            return getDescriptor();
          }
          public static final com.google.protobuf.Descriptors.EnumDescriptor
              getDescriptor() {
            return ChannelSample.getDescriptor().getEnumTypes().get(2);
          }

          private static final AggregationLevel[] VALUES = values();

          public static AggregationLevel valueOf(
              com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
              throw new IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
          }

          private final int value;

          private AggregationLevel(int value) {
            this.value = value;
          }

          // @@protoc_insertion_point(enum_scope:RecordSet.Record.ChannelSample.AggregationLevel)
        }

        private int bitField0_;
        public static final int CHANNEL_FIELD_NUMBER = 1;
        private int channel_;
        /**
         * <pre>
         * ch
         * </pre>
         *
         * <code>optional uint32 channel = 1;</code>
         * @return Whether the channel field is set.
         */
        @Override
        public boolean hasChannel() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * ch
         * </pre>
         *
         * <code>optional uint32 channel = 1;</code>
         * @return The channel.
         */
        @Override
        public int getChannel() {
          return channel_;
        }

        public static final int CHANNELTYPE_FIELD_NUMBER = 2;
        private int channelType_;
        /**
         * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
         * @return Whether the channelType field is set.
         */
        @Override public boolean hasChannelType() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
         * @return The channelType.
         */
        @Override public ChannelType getChannelType() {
          @SuppressWarnings("deprecation")
          ChannelType result = ChannelType.valueOf(channelType_);
          return result == null ? ChannelType.NET : result;
        }

        public static final int EXPORTEDENERGY_WS_FIELD_NUMBER = 3;
        private long exportedEnergyWs_;
        /**
         * <pre>
         * eExp_Ws
         * </pre>
         *
         * <code>optional uint64 exportedEnergy_Ws = 3;</code>
         * @return Whether the exportedEnergyWs field is set.
         */
        @Override
        public boolean hasExportedEnergyWs() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * eExp_Ws
         * </pre>
         *
         * <code>optional uint64 exportedEnergy_Ws = 3;</code>
         * @return The exportedEnergyWs.
         */
        @Override
        public long getExportedEnergyWs() {
          return exportedEnergyWs_;
        }

        public static final int IMPORTEDENERGY_WS_FIELD_NUMBER = 4;
        private long importedEnergyWs_;
        /**
         * <pre>
         * eImp_Ws
         * </pre>
         *
         * <code>optional uint64 importedEnergy_Ws = 4;</code>
         * @return Whether the importedEnergyWs field is set.
         */
        @Override
        public boolean hasImportedEnergyWs() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * eImp_Ws
         * </pre>
         *
         * <code>optional uint64 importedEnergy_Ws = 4;</code>
         * @return The importedEnergyWs.
         */
        @Override
        public long getImportedEnergyWs() {
          return importedEnergyWs_;
        }

        public static final int VOLTAGE_V_FIELD_NUMBER = 5;
        private float voltageV_;
        /**
         * <pre>
         * v_V
         * </pre>
         *
         * <code>optional float voltage_V = 5;</code>
         * @return Whether the voltageV field is set.
         */
        @Override
        public boolean hasVoltageV() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * v_V
         * </pre>
         *
         * <code>optional float voltage_V = 5;</code>
         * @return The voltageV.
         */
        @Override
        public float getVoltageV() {
          return voltageV_;
        }

        public static final int REACTIVEPOWER_VAR_FIELD_NUMBER = 6;
        private int reactivePowerVAR_;
        /**
         * <pre>
         * q_VAR
         * </pre>
         *
         * <code>optional sint32 reactivePower_VAR = 6;</code>
         * @return Whether the reactivePowerVAR field is set.
         */
        @Override
        public boolean hasReactivePowerVAR() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * q_VAR
         * </pre>
         *
         * <code>optional sint32 reactivePower_VAR = 6;</code>
         * @return The reactivePowerVAR.
         */
        @Override
        public int getReactivePowerVAR() {
          return reactivePowerVAR_;
        }

        public static final int REALPOWER_W_FIELD_NUMBER = 7;
        private int realPowerW_;
        /**
         * <pre>
         * p_W
         * </pre>
         *
         * <code>optional sint32 realPower_W = 7;</code>
         * @return Whether the realPowerW field is set.
         */
        @Override
        public boolean hasRealPowerW() {
          return ((bitField0_ & 0x00000040) != 0);
        }
        /**
         * <pre>
         * p_W
         * </pre>
         *
         * <code>optional sint32 realPower_W = 7;</code>
         * @return The realPowerW.
         */
        @Override
        public int getRealPowerW() {
          return realPowerW_;
        }

        public static final int WIDEBANDREACTIVEPOWER_VAR_FIELD_NUMBER = 8;
        private int widebandReactivePowerVAR_;
        /**
         * <pre>
         * (new!) always +ve, in VAR
         * </pre>
         *
         * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
         * @return Whether the widebandReactivePowerVAR field is set.
         */
        @Override
        public boolean hasWidebandReactivePowerVAR() {
          return ((bitField0_ & 0x00000080) != 0);
        }
        /**
         * <pre>
         * (new!) always +ve, in VAR
         * </pre>
         *
         * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
         * @return The widebandReactivePowerVAR.
         */
        @Override
        public int getWidebandReactivePowerVAR() {
          return widebandReactivePowerVAR_;
        }

        public static final int DEVICEID_FIELD_NUMBER = 9;
        private volatile Object deviceId_;
        /**
         * <pre>
         * individual device ids
         * </pre>
         *
         * <code>optional string deviceId = 9;</code>
         * @return Whether the deviceId field is set.
         */
        @Override
        public boolean hasDeviceId() {
          return ((bitField0_ & 0x00000100) != 0);
        }
        /**
         * <pre>
         * individual device ids
         * </pre>
         *
         * <code>optional string deviceId = 9;</code>
         * @return The deviceId.
         */
        @Override
        public String getDeviceId() {
          Object ref = deviceId_;
          if (ref instanceof String) {
            return (String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              deviceId_ = s;
            }
            return s;
          }
        }
        /**
         * <pre>
         * individual device ids
         * </pre>
         *
         * <code>optional string deviceId = 9;</code>
         * @return The bytes for deviceId.
         */
        @Override
        public com.google.protobuf.ByteString
            getDeviceIdBytes() {
          Object ref = deviceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (String) ref);
            deviceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int DEVICETYPE_FIELD_NUMBER = 10;
        private int deviceType_;
        /**
         * <pre>
         * Battery, Solar, Inverter, Generator
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
         * @return Whether the deviceType field is set.
         */
        @Override public boolean hasDeviceType() {
          return ((bitField0_ & 0x00000200) != 0);
        }
        /**
         * <pre>
         * Battery, Solar, Inverter, Generator
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
         * @return The deviceType.
         */
        @Override public DeviceType getDeviceType() {
          @SuppressWarnings("deprecation")
          DeviceType result = DeviceType.valueOf(deviceType_);
          return result == null ? DeviceType.BATTERY : result;
        }

        public static final int AGGREGATELEVEL_FIELD_NUMBER = 11;
        private int aggregateLevel_;
        /**
         * <pre>
         * Aggregated or Raw
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
         * @return Whether the aggregateLevel field is set.
         */
        @Override public boolean hasAggregateLevel() {
          return ((bitField0_ & 0x00000400) != 0);
        }
        /**
         * <pre>
         * Aggregated or Raw
         * </pre>
         *
         * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
         * @return The aggregateLevel.
         */
        @Override public AggregationLevel getAggregateLevel() {
          @SuppressWarnings("deprecation")
          AggregationLevel result = AggregationLevel.valueOf(aggregateLevel_);
          return result == null ? AggregationLevel.RAW : result;
        }

        public static final int SOC_FIELD_NUMBER = 12;
        private float soC_;
        /**
         * <pre>
         * battery percentage, 1 dec.
         * </pre>
         *
         * <code>optional float SoC = 12;</code>
         * @return Whether the soC field is set.
         */
        @Override
        public boolean hasSoC() {
          return ((bitField0_ & 0x00000800) != 0);
        }
        /**
         * <pre>
         * battery percentage, 1 dec.
         * </pre>
         *
         * <code>optional float SoC = 12;</code>
         * @return The soC.
         */
        @Override
        public float getSoC() {
          return soC_;
        }

        public static final int ISREVENUEGRADE_FIELD_NUMBER = 13;
        private boolean isRevenueGrade_;
        /**
         * <pre>
         * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
         * </pre>
         *
         * <code>optional bool isRevenueGrade = 13;</code>
         * @return Whether the isRevenueGrade field is set.
         */
        @Override
        public boolean hasIsRevenueGrade() {
          return ((bitField0_ & 0x00001000) != 0);
        }
        /**
         * <pre>
         * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
         * </pre>
         *
         * <code>optional bool isRevenueGrade = 13;</code>
         * @return The isRevenueGrade.
         */
        @Override
        public boolean getIsRevenueGrade() {
          return isRevenueGrade_;
        }

        public static final int REACTIVEPOWER_VARF_FIELD_NUMBER = 14;
        private float reactivePowerVARf_;
        /**
         * <pre>
         * q_VAR as a float
         * </pre>
         *
         * <code>optional float reactivePower_VARf = 14;</code>
         * @return Whether the reactivePowerVARf field is set.
         */
        @Override
        public boolean hasReactivePowerVARf() {
          return ((bitField0_ & 0x00002000) != 0);
        }
        /**
         * <pre>
         * q_VAR as a float
         * </pre>
         *
         * <code>optional float reactivePower_VARf = 14;</code>
         * @return The reactivePowerVARf.
         */
        @Override
        public float getReactivePowerVARf() {
          return reactivePowerVARf_;
        }

        public static final int REALPOWER_WF_FIELD_NUMBER = 15;
        private float realPowerWf_;
        /**
         * <pre>
         * p_W as a float
         * </pre>
         *
         * <code>optional float realPower_Wf = 15;</code>
         * @return Whether the realPowerWf field is set.
         */
        @Override
        public boolean hasRealPowerWf() {
          return ((bitField0_ & 0x00004000) != 0);
        }
        /**
         * <pre>
         * p_W as a float
         * </pre>
         *
         * <code>optional float realPower_Wf = 15;</code>
         * @return The realPowerWf.
         */
        @Override
        public float getRealPowerWf() {
          return realPowerWf_;
        }

        public static final int LABEL_FIELD_NUMBER = 16;
        private volatile Object label_;
        /**
         * <pre>
         * (Same value as LoadConfig.label for Octopus)
         * </pre>
         *
         * <code>optional string label = 16;</code>
         * @return Whether the label field is set.
         */
        @Override
        public boolean hasLabel() {
          return ((bitField0_ & 0x00008000) != 0);
        }
        /**
         * <pre>
         * (Same value as LoadConfig.label for Octopus)
         * </pre>
         *
         * <code>optional string label = 16;</code>
         * @return The label.
         */
        @Override
        public String getLabel() {
          Object ref = label_;
          if (ref instanceof String) {
            return (String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              label_ = s;
            }
            return s;
          }
        }
        /**
         * <pre>
         * (Same value as LoadConfig.label for Octopus)
         * </pre>
         *
         * <code>optional string label = 16;</code>
         * @return The bytes for label.
         */
        @Override
        public com.google.protobuf.ByteString
            getLabelBytes() {
          Object ref = label_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (String) ref);
            label_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        @Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) != 0)) {
            output.writeUInt32(1, channel_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            output.writeEnum(2, channelType_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            output.writeUInt64(3, exportedEnergyWs_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            output.writeUInt64(4, importedEnergyWs_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            output.writeFloat(5, voltageV_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            output.writeSInt32(6, reactivePowerVAR_);
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            output.writeSInt32(7, realPowerW_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            output.writeUInt32(8, widebandReactivePowerVAR_);
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 9, deviceId_);
          }
          if (((bitField0_ & 0x00000200) != 0)) {
            output.writeEnum(10, deviceType_);
          }
          if (((bitField0_ & 0x00000400) != 0)) {
            output.writeEnum(11, aggregateLevel_);
          }
          if (((bitField0_ & 0x00000800) != 0)) {
            output.writeFloat(12, soC_);
          }
          if (((bitField0_ & 0x00001000) != 0)) {
            output.writeBool(13, isRevenueGrade_);
          }
          if (((bitField0_ & 0x00002000) != 0)) {
            output.writeFloat(14, reactivePowerVARf_);
          }
          if (((bitField0_ & 0x00004000) != 0)) {
            output.writeFloat(15, realPowerWf_);
          }
          if (((bitField0_ & 0x00008000) != 0)) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 16, label_);
          }
          unknownFields.writeTo(output);
        }

        @Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(1, channel_);
          }
          if (((bitField0_ & 0x00000002) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(2, channelType_);
          }
          if (((bitField0_ & 0x00000004) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt64Size(3, exportedEnergyWs_);
          }
          if (((bitField0_ & 0x00000008) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt64Size(4, importedEnergyWs_);
          }
          if (((bitField0_ & 0x00000010) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFloatSize(5, voltageV_);
          }
          if (((bitField0_ & 0x00000020) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeSInt32Size(6, reactivePowerVAR_);
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeSInt32Size(7, realPowerW_);
          }
          if (((bitField0_ & 0x00000080) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(8, widebandReactivePowerVAR_);
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, deviceId_);
          }
          if (((bitField0_ & 0x00000200) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(10, deviceType_);
          }
          if (((bitField0_ & 0x00000400) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeEnumSize(11, aggregateLevel_);
          }
          if (((bitField0_ & 0x00000800) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFloatSize(12, soC_);
          }
          if (((bitField0_ & 0x00001000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(13, isRevenueGrade_);
          }
          if (((bitField0_ & 0x00002000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFloatSize(14, reactivePowerVARf_);
          }
          if (((bitField0_ & 0x00004000) != 0)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFloatSize(15, realPowerWf_);
          }
          if (((bitField0_ & 0x00008000) != 0)) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(16, label_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @Override
        public boolean equals(final Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof ChannelSample)) {
            return super.equals(obj);
          }
          ChannelSample other = (ChannelSample) obj;

          if (hasChannel() != other.hasChannel()) return false;
          if (hasChannel()) {
            if (getChannel()
                != other.getChannel()) return false;
          }
          if (hasChannelType() != other.hasChannelType()) return false;
          if (hasChannelType()) {
            if (channelType_ != other.channelType_) return false;
          }
          if (hasExportedEnergyWs() != other.hasExportedEnergyWs()) return false;
          if (hasExportedEnergyWs()) {
            if (getExportedEnergyWs()
                != other.getExportedEnergyWs()) return false;
          }
          if (hasImportedEnergyWs() != other.hasImportedEnergyWs()) return false;
          if (hasImportedEnergyWs()) {
            if (getImportedEnergyWs()
                != other.getImportedEnergyWs()) return false;
          }
          if (hasVoltageV() != other.hasVoltageV()) return false;
          if (hasVoltageV()) {
            if (Float.floatToIntBits(getVoltageV())
                != Float.floatToIntBits(
                    other.getVoltageV())) return false;
          }
          if (hasReactivePowerVAR() != other.hasReactivePowerVAR()) return false;
          if (hasReactivePowerVAR()) {
            if (getReactivePowerVAR()
                != other.getReactivePowerVAR()) return false;
          }
          if (hasRealPowerW() != other.hasRealPowerW()) return false;
          if (hasRealPowerW()) {
            if (getRealPowerW()
                != other.getRealPowerW()) return false;
          }
          if (hasWidebandReactivePowerVAR() != other.hasWidebandReactivePowerVAR()) return false;
          if (hasWidebandReactivePowerVAR()) {
            if (getWidebandReactivePowerVAR()
                != other.getWidebandReactivePowerVAR()) return false;
          }
          if (hasDeviceId() != other.hasDeviceId()) return false;
          if (hasDeviceId()) {
            if (!getDeviceId()
                .equals(other.getDeviceId())) return false;
          }
          if (hasDeviceType() != other.hasDeviceType()) return false;
          if (hasDeviceType()) {
            if (deviceType_ != other.deviceType_) return false;
          }
          if (hasAggregateLevel() != other.hasAggregateLevel()) return false;
          if (hasAggregateLevel()) {
            if (aggregateLevel_ != other.aggregateLevel_) return false;
          }
          if (hasSoC() != other.hasSoC()) return false;
          if (hasSoC()) {
            if (Float.floatToIntBits(getSoC())
                != Float.floatToIntBits(
                    other.getSoC())) return false;
          }
          if (hasIsRevenueGrade() != other.hasIsRevenueGrade()) return false;
          if (hasIsRevenueGrade()) {
            if (getIsRevenueGrade()
                != other.getIsRevenueGrade()) return false;
          }
          if (hasReactivePowerVARf() != other.hasReactivePowerVARf()) return false;
          if (hasReactivePowerVARf()) {
            if (Float.floatToIntBits(getReactivePowerVARf())
                != Float.floatToIntBits(
                    other.getReactivePowerVARf())) return false;
          }
          if (hasRealPowerWf() != other.hasRealPowerWf()) return false;
          if (hasRealPowerWf()) {
            if (Float.floatToIntBits(getRealPowerWf())
                != Float.floatToIntBits(
                    other.getRealPowerWf())) return false;
          }
          if (hasLabel() != other.hasLabel()) return false;
          if (hasLabel()) {
            if (!getLabel()
                .equals(other.getLabel())) return false;
          }
          if (!unknownFields.equals(other.unknownFields)) return false;
          return true;
        }

        @Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (hasChannel()) {
            hash = (37 * hash) + CHANNEL_FIELD_NUMBER;
            hash = (53 * hash) + getChannel();
          }
          if (hasChannelType()) {
            hash = (37 * hash) + CHANNELTYPE_FIELD_NUMBER;
            hash = (53 * hash) + channelType_;
          }
          if (hasExportedEnergyWs()) {
            hash = (37 * hash) + EXPORTEDENERGY_WS_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getExportedEnergyWs());
          }
          if (hasImportedEnergyWs()) {
            hash = (37 * hash) + IMPORTEDENERGY_WS_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                getImportedEnergyWs());
          }
          if (hasVoltageV()) {
            hash = (37 * hash) + VOLTAGE_V_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                getVoltageV());
          }
          if (hasReactivePowerVAR()) {
            hash = (37 * hash) + REACTIVEPOWER_VAR_FIELD_NUMBER;
            hash = (53 * hash) + getReactivePowerVAR();
          }
          if (hasRealPowerW()) {
            hash = (37 * hash) + REALPOWER_W_FIELD_NUMBER;
            hash = (53 * hash) + getRealPowerW();
          }
          if (hasWidebandReactivePowerVAR()) {
            hash = (37 * hash) + WIDEBANDREACTIVEPOWER_VAR_FIELD_NUMBER;
            hash = (53 * hash) + getWidebandReactivePowerVAR();
          }
          if (hasDeviceId()) {
            hash = (37 * hash) + DEVICEID_FIELD_NUMBER;
            hash = (53 * hash) + getDeviceId().hashCode();
          }
          if (hasDeviceType()) {
            hash = (37 * hash) + DEVICETYPE_FIELD_NUMBER;
            hash = (53 * hash) + deviceType_;
          }
          if (hasAggregateLevel()) {
            hash = (37 * hash) + AGGREGATELEVEL_FIELD_NUMBER;
            hash = (53 * hash) + aggregateLevel_;
          }
          if (hasSoC()) {
            hash = (37 * hash) + SOC_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                getSoC());
          }
          if (hasIsRevenueGrade()) {
            hash = (37 * hash) + ISREVENUEGRADE_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getIsRevenueGrade());
          }
          if (hasReactivePowerVARf()) {
            hash = (37 * hash) + REACTIVEPOWER_VARF_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                getReactivePowerVARf());
          }
          if (hasRealPowerWf()) {
            hash = (37 * hash) + REALPOWER_WF_FIELD_NUMBER;
            hash = (53 * hash) + Float.floatToIntBits(
                getRealPowerWf());
          }
          if (hasLabel()) {
            hash = (37 * hash) + LABEL_FIELD_NUMBER;
            hash = (53 * hash) + getLabel().hashCode();
          }
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static ChannelSample parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ChannelSample parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ChannelSample parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ChannelSample parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ChannelSample parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static ChannelSample parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static ChannelSample parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static ChannelSample parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static ChannelSample parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static ChannelSample parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static ChannelSample parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static ChannelSample parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(ChannelSample prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
            BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code RecordSet.Record.ChannelSample}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:RecordSet.Record.ChannelSample)
            ChannelSampleOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return RecordSetProto.internal_static_RecordSet_Record_ChannelSample_descriptor;
          }

          @Override
          protected FieldAccessorTable
              internalGetFieldAccessorTable() {
            return RecordSetProto.internal_static_RecordSet_Record_ChannelSample_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    ChannelSample.class, Builder.class);
          }

          // Construct using RecordSetProto.RecordSet.Record.ChannelSample.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @Override
          public Builder clear() {
            super.clear();
            channel_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            channelType_ = 0;
            bitField0_ = (bitField0_ & ~0x00000002);
            exportedEnergyWs_ = 0L;
            bitField0_ = (bitField0_ & ~0x00000004);
            importedEnergyWs_ = 0L;
            bitField0_ = (bitField0_ & ~0x00000008);
            voltageV_ = 0F;
            bitField0_ = (bitField0_ & ~0x00000010);
            reactivePowerVAR_ = 0;
            bitField0_ = (bitField0_ & ~0x00000020);
            realPowerW_ = 0;
            bitField0_ = (bitField0_ & ~0x00000040);
            widebandReactivePowerVAR_ = 0;
            bitField0_ = (bitField0_ & ~0x00000080);
            deviceId_ = "";
            bitField0_ = (bitField0_ & ~0x00000100);
            deviceType_ = 0;
            bitField0_ = (bitField0_ & ~0x00000200);
            aggregateLevel_ = 0;
            bitField0_ = (bitField0_ & ~0x00000400);
            soC_ = 0F;
            bitField0_ = (bitField0_ & ~0x00000800);
            isRevenueGrade_ = false;
            bitField0_ = (bitField0_ & ~0x00001000);
            reactivePowerVARf_ = 0F;
            bitField0_ = (bitField0_ & ~0x00002000);
            realPowerWf_ = 0F;
            bitField0_ = (bitField0_ & ~0x00004000);
            label_ = "";
            bitField0_ = (bitField0_ & ~0x00008000);
            return this;
          }

          @Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return RecordSetProto.internal_static_RecordSet_Record_ChannelSample_descriptor;
          }

          @Override
          public ChannelSample getDefaultInstanceForType() {
            return ChannelSample.getDefaultInstance();
          }

          @Override
          public ChannelSample build() {
            ChannelSample result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @Override
          public ChannelSample buildPartial() {
            ChannelSample result = new ChannelSample(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              result.channel_ = channel_;
              to_bitField0_ |= 0x00000001;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
              to_bitField0_ |= 0x00000002;
            }
            result.channelType_ = channelType_;
            if (((from_bitField0_ & 0x00000004) != 0)) {
              result.exportedEnergyWs_ = exportedEnergyWs_;
              to_bitField0_ |= 0x00000004;
            }
            if (((from_bitField0_ & 0x00000008) != 0)) {
              result.importedEnergyWs_ = importedEnergyWs_;
              to_bitField0_ |= 0x00000008;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
              result.voltageV_ = voltageV_;
              to_bitField0_ |= 0x00000010;
            }
            if (((from_bitField0_ & 0x00000020) != 0)) {
              result.reactivePowerVAR_ = reactivePowerVAR_;
              to_bitField0_ |= 0x00000020;
            }
            if (((from_bitField0_ & 0x00000040) != 0)) {
              result.realPowerW_ = realPowerW_;
              to_bitField0_ |= 0x00000040;
            }
            if (((from_bitField0_ & 0x00000080) != 0)) {
              result.widebandReactivePowerVAR_ = widebandReactivePowerVAR_;
              to_bitField0_ |= 0x00000080;
            }
            if (((from_bitField0_ & 0x00000100) != 0)) {
              to_bitField0_ |= 0x00000100;
            }
            result.deviceId_ = deviceId_;
            if (((from_bitField0_ & 0x00000200) != 0)) {
              to_bitField0_ |= 0x00000200;
            }
            result.deviceType_ = deviceType_;
            if (((from_bitField0_ & 0x00000400) != 0)) {
              to_bitField0_ |= 0x00000400;
            }
            result.aggregateLevel_ = aggregateLevel_;
            if (((from_bitField0_ & 0x00000800) != 0)) {
              result.soC_ = soC_;
              to_bitField0_ |= 0x00000800;
            }
            if (((from_bitField0_ & 0x00001000) != 0)) {
              result.isRevenueGrade_ = isRevenueGrade_;
              to_bitField0_ |= 0x00001000;
            }
            if (((from_bitField0_ & 0x00002000) != 0)) {
              result.reactivePowerVARf_ = reactivePowerVARf_;
              to_bitField0_ |= 0x00002000;
            }
            if (((from_bitField0_ & 0x00004000) != 0)) {
              result.realPowerWf_ = realPowerWf_;
              to_bitField0_ |= 0x00004000;
            }
            if (((from_bitField0_ & 0x00008000) != 0)) {
              to_bitField0_ |= 0x00008000;
            }
            result.label_ = label_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          @Override
          public Builder clone() {
            return super.clone();
          }
          @Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
            return super.setField(field, value);
          }
          @Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
            return super.addRepeatedField(field, value);
          }
          @Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof ChannelSample) {
              return mergeFrom((ChannelSample)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(ChannelSample other) {
            if (other == ChannelSample.getDefaultInstance()) return this;
            if (other.hasChannel()) {
              setChannel(other.getChannel());
            }
            if (other.hasChannelType()) {
              setChannelType(other.getChannelType());
            }
            if (other.hasExportedEnergyWs()) {
              setExportedEnergyWs(other.getExportedEnergyWs());
            }
            if (other.hasImportedEnergyWs()) {
              setImportedEnergyWs(other.getImportedEnergyWs());
            }
            if (other.hasVoltageV()) {
              setVoltageV(other.getVoltageV());
            }
            if (other.hasReactivePowerVAR()) {
              setReactivePowerVAR(other.getReactivePowerVAR());
            }
            if (other.hasRealPowerW()) {
              setRealPowerW(other.getRealPowerW());
            }
            if (other.hasWidebandReactivePowerVAR()) {
              setWidebandReactivePowerVAR(other.getWidebandReactivePowerVAR());
            }
            if (other.hasDeviceId()) {
              bitField0_ |= 0x00000100;
              deviceId_ = other.deviceId_;
              onChanged();
            }
            if (other.hasDeviceType()) {
              setDeviceType(other.getDeviceType());
            }
            if (other.hasAggregateLevel()) {
              setAggregateLevel(other.getAggregateLevel());
            }
            if (other.hasSoC()) {
              setSoC(other.getSoC());
            }
            if (other.hasIsRevenueGrade()) {
              setIsRevenueGrade(other.getIsRevenueGrade());
            }
            if (other.hasReactivePowerVARf()) {
              setReactivePowerVARf(other.getReactivePowerVARf());
            }
            if (other.hasRealPowerWf()) {
              setRealPowerWf(other.getRealPowerWf());
            }
            if (other.hasLabel()) {
              bitField0_ |= 0x00008000;
              label_ = other.label_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @Override
          public final boolean isInitialized() {
            return true;
          }

          @Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            ChannelSample parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (ChannelSample) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private int channel_ ;
          /**
           * <pre>
           * ch
           * </pre>
           *
           * <code>optional uint32 channel = 1;</code>
           * @return Whether the channel field is set.
           */
          @Override
          public boolean hasChannel() {
            return ((bitField0_ & 0x00000001) != 0);
          }
          /**
           * <pre>
           * ch
           * </pre>
           *
           * <code>optional uint32 channel = 1;</code>
           * @return The channel.
           */
          @Override
          public int getChannel() {
            return channel_;
          }
          /**
           * <pre>
           * ch
           * </pre>
           *
           * <code>optional uint32 channel = 1;</code>
           * @param value The channel to set.
           * @return This builder for chaining.
           */
          public Builder setChannel(int value) {
            bitField0_ |= 0x00000001;
            channel_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * ch
           * </pre>
           *
           * <code>optional uint32 channel = 1;</code>
           * @return This builder for chaining.
           */
          public Builder clearChannel() {
            bitField0_ = (bitField0_ & ~0x00000001);
            channel_ = 0;
            onChanged();
            return this;
          }

          private int channelType_ = 0;
          /**
           * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
           * @return Whether the channelType field is set.
           */
          @Override public boolean hasChannelType() {
            return ((bitField0_ & 0x00000002) != 0);
          }
          /**
           * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
           * @return The channelType.
           */
          @Override
          public ChannelType getChannelType() {
            @SuppressWarnings("deprecation")
            ChannelType result = ChannelType.valueOf(channelType_);
            return result == null ? ChannelType.NET : result;
          }
          /**
           * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
           * @param value The channelType to set.
           * @return This builder for chaining.
           */
          public Builder setChannelType(ChannelType value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000002;
            channelType_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <code>optional .RecordSet.Record.ChannelSample.ChannelType channelType = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearChannelType() {
            bitField0_ = (bitField0_ & ~0x00000002);
            channelType_ = 0;
            onChanged();
            return this;
          }

          private long exportedEnergyWs_ ;
          /**
           * <pre>
           * eExp_Ws
           * </pre>
           *
           * <code>optional uint64 exportedEnergy_Ws = 3;</code>
           * @return Whether the exportedEnergyWs field is set.
           */
          @Override
          public boolean hasExportedEnergyWs() {
            return ((bitField0_ & 0x00000004) != 0);
          }
          /**
           * <pre>
           * eExp_Ws
           * </pre>
           *
           * <code>optional uint64 exportedEnergy_Ws = 3;</code>
           * @return The exportedEnergyWs.
           */
          @Override
          public long getExportedEnergyWs() {
            return exportedEnergyWs_;
          }
          /**
           * <pre>
           * eExp_Ws
           * </pre>
           *
           * <code>optional uint64 exportedEnergy_Ws = 3;</code>
           * @param value The exportedEnergyWs to set.
           * @return This builder for chaining.
           */
          public Builder setExportedEnergyWs(long value) {
            bitField0_ |= 0x00000004;
            exportedEnergyWs_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * eExp_Ws
           * </pre>
           *
           * <code>optional uint64 exportedEnergy_Ws = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearExportedEnergyWs() {
            bitField0_ = (bitField0_ & ~0x00000004);
            exportedEnergyWs_ = 0L;
            onChanged();
            return this;
          }

          private long importedEnergyWs_ ;
          /**
           * <pre>
           * eImp_Ws
           * </pre>
           *
           * <code>optional uint64 importedEnergy_Ws = 4;</code>
           * @return Whether the importedEnergyWs field is set.
           */
          @Override
          public boolean hasImportedEnergyWs() {
            return ((bitField0_ & 0x00000008) != 0);
          }
          /**
           * <pre>
           * eImp_Ws
           * </pre>
           *
           * <code>optional uint64 importedEnergy_Ws = 4;</code>
           * @return The importedEnergyWs.
           */
          @Override
          public long getImportedEnergyWs() {
            return importedEnergyWs_;
          }
          /**
           * <pre>
           * eImp_Ws
           * </pre>
           *
           * <code>optional uint64 importedEnergy_Ws = 4;</code>
           * @param value The importedEnergyWs to set.
           * @return This builder for chaining.
           */
          public Builder setImportedEnergyWs(long value) {
            bitField0_ |= 0x00000008;
            importedEnergyWs_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * eImp_Ws
           * </pre>
           *
           * <code>optional uint64 importedEnergy_Ws = 4;</code>
           * @return This builder for chaining.
           */
          public Builder clearImportedEnergyWs() {
            bitField0_ = (bitField0_ & ~0x00000008);
            importedEnergyWs_ = 0L;
            onChanged();
            return this;
          }

          private float voltageV_ ;
          /**
           * <pre>
           * v_V
           * </pre>
           *
           * <code>optional float voltage_V = 5;</code>
           * @return Whether the voltageV field is set.
           */
          @Override
          public boolean hasVoltageV() {
            return ((bitField0_ & 0x00000010) != 0);
          }
          /**
           * <pre>
           * v_V
           * </pre>
           *
           * <code>optional float voltage_V = 5;</code>
           * @return The voltageV.
           */
          @Override
          public float getVoltageV() {
            return voltageV_;
          }
          /**
           * <pre>
           * v_V
           * </pre>
           *
           * <code>optional float voltage_V = 5;</code>
           * @param value The voltageV to set.
           * @return This builder for chaining.
           */
          public Builder setVoltageV(float value) {
            bitField0_ |= 0x00000010;
            voltageV_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * v_V
           * </pre>
           *
           * <code>optional float voltage_V = 5;</code>
           * @return This builder for chaining.
           */
          public Builder clearVoltageV() {
            bitField0_ = (bitField0_ & ~0x00000010);
            voltageV_ = 0F;
            onChanged();
            return this;
          }

          private int reactivePowerVAR_ ;
          /**
           * <pre>
           * q_VAR
           * </pre>
           *
           * <code>optional sint32 reactivePower_VAR = 6;</code>
           * @return Whether the reactivePowerVAR field is set.
           */
          @Override
          public boolean hasReactivePowerVAR() {
            return ((bitField0_ & 0x00000020) != 0);
          }
          /**
           * <pre>
           * q_VAR
           * </pre>
           *
           * <code>optional sint32 reactivePower_VAR = 6;</code>
           * @return The reactivePowerVAR.
           */
          @Override
          public int getReactivePowerVAR() {
            return reactivePowerVAR_;
          }
          /**
           * <pre>
           * q_VAR
           * </pre>
           *
           * <code>optional sint32 reactivePower_VAR = 6;</code>
           * @param value The reactivePowerVAR to set.
           * @return This builder for chaining.
           */
          public Builder setReactivePowerVAR(int value) {
            bitField0_ |= 0x00000020;
            reactivePowerVAR_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * q_VAR
           * </pre>
           *
           * <code>optional sint32 reactivePower_VAR = 6;</code>
           * @return This builder for chaining.
           */
          public Builder clearReactivePowerVAR() {
            bitField0_ = (bitField0_ & ~0x00000020);
            reactivePowerVAR_ = 0;
            onChanged();
            return this;
          }

          private int realPowerW_ ;
          /**
           * <pre>
           * p_W
           * </pre>
           *
           * <code>optional sint32 realPower_W = 7;</code>
           * @return Whether the realPowerW field is set.
           */
          @Override
          public boolean hasRealPowerW() {
            return ((bitField0_ & 0x00000040) != 0);
          }
          /**
           * <pre>
           * p_W
           * </pre>
           *
           * <code>optional sint32 realPower_W = 7;</code>
           * @return The realPowerW.
           */
          @Override
          public int getRealPowerW() {
            return realPowerW_;
          }
          /**
           * <pre>
           * p_W
           * </pre>
           *
           * <code>optional sint32 realPower_W = 7;</code>
           * @param value The realPowerW to set.
           * @return This builder for chaining.
           */
          public Builder setRealPowerW(int value) {
            bitField0_ |= 0x00000040;
            realPowerW_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * p_W
           * </pre>
           *
           * <code>optional sint32 realPower_W = 7;</code>
           * @return This builder for chaining.
           */
          public Builder clearRealPowerW() {
            bitField0_ = (bitField0_ & ~0x00000040);
            realPowerW_ = 0;
            onChanged();
            return this;
          }

          private int widebandReactivePowerVAR_ ;
          /**
           * <pre>
           * (new!) always +ve, in VAR
           * </pre>
           *
           * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
           * @return Whether the widebandReactivePowerVAR field is set.
           */
          @Override
          public boolean hasWidebandReactivePowerVAR() {
            return ((bitField0_ & 0x00000080) != 0);
          }
          /**
           * <pre>
           * (new!) always +ve, in VAR
           * </pre>
           *
           * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
           * @return The widebandReactivePowerVAR.
           */
          @Override
          public int getWidebandReactivePowerVAR() {
            return widebandReactivePowerVAR_;
          }
          /**
           * <pre>
           * (new!) always +ve, in VAR
           * </pre>
           *
           * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
           * @param value The widebandReactivePowerVAR to set.
           * @return This builder for chaining.
           */
          public Builder setWidebandReactivePowerVAR(int value) {
            bitField0_ |= 0x00000080;
            widebandReactivePowerVAR_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (new!) always +ve, in VAR
           * </pre>
           *
           * <code>optional uint32 widebandReactivePower_VAR = 8;</code>
           * @return This builder for chaining.
           */
          public Builder clearWidebandReactivePowerVAR() {
            bitField0_ = (bitField0_ & ~0x00000080);
            widebandReactivePowerVAR_ = 0;
            onChanged();
            return this;
          }

          private Object deviceId_ = "";
          /**
           * <pre>
           * individual device ids
           * </pre>
           *
           * <code>optional string deviceId = 9;</code>
           * @return Whether the deviceId field is set.
           */
          public boolean hasDeviceId() {
            return ((bitField0_ & 0x00000100) != 0);
          }
          /**
           * <pre>
           * individual device ids
           * </pre>
           *
           * <code>optional string deviceId = 9;</code>
           * @return The deviceId.
           */
          public String getDeviceId() {
            Object ref = deviceId_;
            if (!(ref instanceof String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                deviceId_ = s;
              }
              return s;
            } else {
              return (String) ref;
            }
          }
          /**
           * <pre>
           * individual device ids
           * </pre>
           *
           * <code>optional string deviceId = 9;</code>
           * @return The bytes for deviceId.
           */
          public com.google.protobuf.ByteString
              getDeviceIdBytes() {
            Object ref = deviceId_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (String) ref);
              deviceId_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * individual device ids
           * </pre>
           *
           * <code>optional string deviceId = 9;</code>
           * @param value The deviceId to set.
           * @return This builder for chaining.
           */
          public Builder setDeviceId(
              String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
            deviceId_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * individual device ids
           * </pre>
           *
           * <code>optional string deviceId = 9;</code>
           * @return This builder for chaining.
           */
          public Builder clearDeviceId() {
            bitField0_ = (bitField0_ & ~0x00000100);
            deviceId_ = getDefaultInstance().getDeviceId();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * individual device ids
           * </pre>
           *
           * <code>optional string deviceId = 9;</code>
           * @param value The bytes for deviceId to set.
           * @return This builder for chaining.
           */
          public Builder setDeviceIdBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
            deviceId_ = value;
            onChanged();
            return this;
          }

          private int deviceType_ = 0;
          /**
           * <pre>
           * Battery, Solar, Inverter, Generator
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
           * @return Whether the deviceType field is set.
           */
          @Override public boolean hasDeviceType() {
            return ((bitField0_ & 0x00000200) != 0);
          }
          /**
           * <pre>
           * Battery, Solar, Inverter, Generator
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
           * @return The deviceType.
           */
          @Override
          public DeviceType getDeviceType() {
            @SuppressWarnings("deprecation")
            DeviceType result = DeviceType.valueOf(deviceType_);
            return result == null ? DeviceType.BATTERY : result;
          }
          /**
           * <pre>
           * Battery, Solar, Inverter, Generator
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
           * @param value The deviceType to set.
           * @return This builder for chaining.
           */
          public Builder setDeviceType(DeviceType value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000200;
            deviceType_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Battery, Solar, Inverter, Generator
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.DeviceType deviceType = 10;</code>
           * @return This builder for chaining.
           */
          public Builder clearDeviceType() {
            bitField0_ = (bitField0_ & ~0x00000200);
            deviceType_ = 0;
            onChanged();
            return this;
          }

          private int aggregateLevel_ = 0;
          /**
           * <pre>
           * Aggregated or Raw
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
           * @return Whether the aggregateLevel field is set.
           */
          @Override public boolean hasAggregateLevel() {
            return ((bitField0_ & 0x00000400) != 0);
          }
          /**
           * <pre>
           * Aggregated or Raw
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
           * @return The aggregateLevel.
           */
          @Override
          public AggregationLevel getAggregateLevel() {
            @SuppressWarnings("deprecation")
            AggregationLevel result = AggregationLevel.valueOf(aggregateLevel_);
            return result == null ? AggregationLevel.RAW : result;
          }
          /**
           * <pre>
           * Aggregated or Raw
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
           * @param value The aggregateLevel to set.
           * @return This builder for chaining.
           */
          public Builder setAggregateLevel(AggregationLevel value) {
            if (value == null) {
              throw new NullPointerException();
            }
            bitField0_ |= 0x00000400;
            aggregateLevel_ = value.getNumber();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Aggregated or Raw
           * </pre>
           *
           * <code>optional .RecordSet.Record.ChannelSample.AggregationLevel aggregateLevel = 11;</code>
           * @return This builder for chaining.
           */
          public Builder clearAggregateLevel() {
            bitField0_ = (bitField0_ & ~0x00000400);
            aggregateLevel_ = 0;
            onChanged();
            return this;
          }

          private float soC_ ;
          /**
           * <pre>
           * battery percentage, 1 dec.
           * </pre>
           *
           * <code>optional float SoC = 12;</code>
           * @return Whether the soC field is set.
           */
          @Override
          public boolean hasSoC() {
            return ((bitField0_ & 0x00000800) != 0);
          }
          /**
           * <pre>
           * battery percentage, 1 dec.
           * </pre>
           *
           * <code>optional float SoC = 12;</code>
           * @return The soC.
           */
          @Override
          public float getSoC() {
            return soC_;
          }
          /**
           * <pre>
           * battery percentage, 1 dec.
           * </pre>
           *
           * <code>optional float SoC = 12;</code>
           * @param value The soC to set.
           * @return This builder for chaining.
           */
          public Builder setSoC(float value) {
            bitField0_ |= 0x00000800;
            soC_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * battery percentage, 1 dec.
           * </pre>
           *
           * <code>optional float SoC = 12;</code>
           * @return This builder for chaining.
           */
          public Builder clearSoC() {
            bitField0_ = (bitField0_ & ~0x00000800);
            soC_ = 0F;
            onChanged();
            return this;
          }

          private boolean isRevenueGrade_ ;
          /**
           * <pre>
           * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
           * </pre>
           *
           * <code>optional bool isRevenueGrade = 13;</code>
           * @return Whether the isRevenueGrade field is set.
           */
          @Override
          public boolean hasIsRevenueGrade() {
            return ((bitField0_ & 0x00001000) != 0);
          }
          /**
           * <pre>
           * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
           * </pre>
           *
           * <code>optional bool isRevenueGrade = 13;</code>
           * @return The isRevenueGrade.
           */
          @Override
          public boolean getIsRevenueGrade() {
            return isRevenueGrade_;
          }
          /**
           * <pre>
           * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
           * </pre>
           *
           * <code>optional bool isRevenueGrade = 13;</code>
           * @param value The isRevenueGrade to set.
           * @return This builder for chaining.
           */
          public Builder setIsRevenueGrade(boolean value) {
            bitField0_ |= 0x00001000;
            isRevenueGrade_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * 'True' denotes the measurement for this channel was made by a revenue-grade metrology device
           * </pre>
           *
           * <code>optional bool isRevenueGrade = 13;</code>
           * @return This builder for chaining.
           */
          public Builder clearIsRevenueGrade() {
            bitField0_ = (bitField0_ & ~0x00001000);
            isRevenueGrade_ = false;
            onChanged();
            return this;
          }

          private float reactivePowerVARf_ ;
          /**
           * <pre>
           * q_VAR as a float
           * </pre>
           *
           * <code>optional float reactivePower_VARf = 14;</code>
           * @return Whether the reactivePowerVARf field is set.
           */
          @Override
          public boolean hasReactivePowerVARf() {
            return ((bitField0_ & 0x00002000) != 0);
          }
          /**
           * <pre>
           * q_VAR as a float
           * </pre>
           *
           * <code>optional float reactivePower_VARf = 14;</code>
           * @return The reactivePowerVARf.
           */
          @Override
          public float getReactivePowerVARf() {
            return reactivePowerVARf_;
          }
          /**
           * <pre>
           * q_VAR as a float
           * </pre>
           *
           * <code>optional float reactivePower_VARf = 14;</code>
           * @param value The reactivePowerVARf to set.
           * @return This builder for chaining.
           */
          public Builder setReactivePowerVARf(float value) {
            bitField0_ |= 0x00002000;
            reactivePowerVARf_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * q_VAR as a float
           * </pre>
           *
           * <code>optional float reactivePower_VARf = 14;</code>
           * @return This builder for chaining.
           */
          public Builder clearReactivePowerVARf() {
            bitField0_ = (bitField0_ & ~0x00002000);
            reactivePowerVARf_ = 0F;
            onChanged();
            return this;
          }

          private float realPowerWf_ ;
          /**
           * <pre>
           * p_W as a float
           * </pre>
           *
           * <code>optional float realPower_Wf = 15;</code>
           * @return Whether the realPowerWf field is set.
           */
          @Override
          public boolean hasRealPowerWf() {
            return ((bitField0_ & 0x00004000) != 0);
          }
          /**
           * <pre>
           * p_W as a float
           * </pre>
           *
           * <code>optional float realPower_Wf = 15;</code>
           * @return The realPowerWf.
           */
          @Override
          public float getRealPowerWf() {
            return realPowerWf_;
          }
          /**
           * <pre>
           * p_W as a float
           * </pre>
           *
           * <code>optional float realPower_Wf = 15;</code>
           * @param value The realPowerWf to set.
           * @return This builder for chaining.
           */
          public Builder setRealPowerWf(float value) {
            bitField0_ |= 0x00004000;
            realPowerWf_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * p_W as a float
           * </pre>
           *
           * <code>optional float realPower_Wf = 15;</code>
           * @return This builder for chaining.
           */
          public Builder clearRealPowerWf() {
            bitField0_ = (bitField0_ & ~0x00004000);
            realPowerWf_ = 0F;
            onChanged();
            return this;
          }

          private Object label_ = "";
          /**
           * <pre>
           * (Same value as LoadConfig.label for Octopus)
           * </pre>
           *
           * <code>optional string label = 16;</code>
           * @return Whether the label field is set.
           */
          public boolean hasLabel() {
            return ((bitField0_ & 0x00008000) != 0);
          }
          /**
           * <pre>
           * (Same value as LoadConfig.label for Octopus)
           * </pre>
           *
           * <code>optional string label = 16;</code>
           * @return The label.
           */
          public String getLabel() {
            Object ref = label_;
            if (!(ref instanceof String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              String s = bs.toStringUtf8();
              if (bs.isValidUtf8()) {
                label_ = s;
              }
              return s;
            } else {
              return (String) ref;
            }
          }
          /**
           * <pre>
           * (Same value as LoadConfig.label for Octopus)
           * </pre>
           *
           * <code>optional string label = 16;</code>
           * @return The bytes for label.
           */
          public com.google.protobuf.ByteString
              getLabelBytes() {
            Object ref = label_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (String) ref);
              label_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * (Same value as LoadConfig.label for Octopus)
           * </pre>
           *
           * <code>optional string label = 16;</code>
           * @param value The label to set.
           * @return This builder for chaining.
           */
          public Builder setLabel(
              String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
            label_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (Same value as LoadConfig.label for Octopus)
           * </pre>
           *
           * <code>optional string label = 16;</code>
           * @return This builder for chaining.
           */
          public Builder clearLabel() {
            bitField0_ = (bitField0_ & ~0x00008000);
            label_ = getDefaultInstance().getLabel();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * (Same value as LoadConfig.label for Octopus)
           * </pre>
           *
           * <code>optional string label = 16;</code>
           * @param value The bytes for label to set.
           * @return This builder for chaining.
           */
          public Builder setLabelBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
            label_ = value;
            onChanged();
            return this;
          }
          @Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:RecordSet.Record.ChannelSample)
        }

        // @@protoc_insertion_point(class_scope:RecordSet.Record.ChannelSample)
        private static final ChannelSample DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new ChannelSample();
        }

        public static ChannelSample getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @Deprecated public static final com.google.protobuf.Parser<ChannelSample>
            PARSER = new com.google.protobuf.AbstractParser<ChannelSample>() {
          @Override
          public ChannelSample parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new ChannelSample(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<ChannelSample> parser() {
          return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<ChannelSample> getParserForType() {
          return PARSER;
        }

        @Override
        public ChannelSample getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int TIMESTAMP_FIELD_NUMBER = 1;
      private double timestamp_;
      /**
       * <pre>
       * UTC timestamp (unix epoch) marking when this record was captured
       * </pre>
       *
       * <code>optional double timestamp = 1;</code>
       * @return Whether the timestamp field is set.
       */
      @Override
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * UTC timestamp (unix epoch) marking when this record was captured
       * </pre>
       *
       * <code>optional double timestamp = 1;</code>
       * @return The timestamp.
       */
      @Override
      public double getTimestamp() {
        return timestamp_;
      }

      public static final int CHANNEL_FIELD_NUMBER = 2;
      private java.util.List<ChannelSample> channel_;
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      @Override
      public java.util.List<ChannelSample> getChannelList() {
        return channel_;
      }
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      @Override
      public java.util.List<? extends ChannelSampleOrBuilder>
          getChannelOrBuilderList() {
        return channel_;
      }
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      @Override
      public int getChannelCount() {
        return channel_.size();
      }
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      @Override
      public ChannelSample getChannel(int index) {
        return channel_.get(index);
      }
      /**
       * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
       */
      @Override
      public ChannelSampleOrBuilder getChannelOrBuilder(
          int index) {
        return channel_.get(index);
      }

      public static final int SYSTEMTIME_FIELD_NUMBER = 5;
      private double systemTime_;
      /**
       * <pre>
       * local system timestemp (arbitrary epoch) when this record was captured
       * </pre>
       *
       * <code>optional double systemTime = 5;</code>
       * @return Whether the systemTime field is set.
       */
      @Override
      public boolean hasSystemTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * local system timestemp (arbitrary epoch) when this record was captured
       * </pre>
       *
       * <code>optional double systemTime = 5;</code>
       * @return The systemTime.
       */
      @Override
      public double getSystemTime() {
        return systemTime_;
      }

      public static final int SYSMODE_FIELD_NUMBER = 3;
      private int sysMode_;
      /**
       * <pre>
       * Mode the inverter is in
       * </pre>
       *
       * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
       * @return Whether the sysMode field is set.
       */
      @Override public boolean hasSysMode() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Mode the inverter is in
       * </pre>
       *
       * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
       * @return The sysMode.
       */
      @Override public SysModeType getSysMode() {
        @SuppressWarnings("deprecation")
        SysModeType result = SysModeType.valueOf(sysMode_);
        return result == null ? SysModeType.SAFETY_SHUTDOWN : result;
      }

      public static final int INVERTERSTATE_FIELD_NUMBER = 4;
      private int inverterState_;
      /**
       * <pre>
       * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
       * </pre>
       *
       * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
       * @return Whether the inverterState field is set.
       */
      @Override public boolean hasInverterState() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
       * </pre>
       *
       * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
       * @return The inverterState.
       */
      @Override public InverterStateType getInverterState() {
        @SuppressWarnings("deprecation")
        InverterStateType result = InverterStateType.valueOf(inverterState_);
        return result == null ? InverterStateType.UNKNOWN : result;
      }

      private byte memoizedIsInitialized = -1;
      @Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeDouble(1, timestamp_);
        }
        for (int i = 0; i < channel_.size(); i++) {
          output.writeMessage(2, channel_.get(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeEnum(3, sysMode_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeEnum(4, inverterState_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeDouble(5, systemTime_);
        }
        unknownFields.writeTo(output);
      }

      @Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, timestamp_);
        }
        for (int i = 0; i < channel_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, channel_.get(i));
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, sysMode_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(4, inverterState_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(5, systemTime_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @Override
      public boolean equals(final Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Record)) {
          return super.equals(obj);
        }
        Record other = (Record) obj;

        if (hasTimestamp() != other.hasTimestamp()) return false;
        if (hasTimestamp()) {
          if (Double.doubleToLongBits(getTimestamp())
              != Double.doubleToLongBits(
                  other.getTimestamp())) return false;
        }
        if (!getChannelList()
            .equals(other.getChannelList())) return false;
        if (hasSystemTime() != other.hasSystemTime()) return false;
        if (hasSystemTime()) {
          if (Double.doubleToLongBits(getSystemTime())
              != Double.doubleToLongBits(
                  other.getSystemTime())) return false;
        }
        if (hasSysMode() != other.hasSysMode()) return false;
        if (hasSysMode()) {
          if (sysMode_ != other.sysMode_) return false;
        }
        if (hasInverterState() != other.hasInverterState()) return false;
        if (hasInverterState()) {
          if (inverterState_ != other.inverterState_) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTimestamp()) {
          hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              Double.doubleToLongBits(getTimestamp()));
        }
        if (getChannelCount() > 0) {
          hash = (37 * hash) + CHANNEL_FIELD_NUMBER;
          hash = (53 * hash) + getChannelList().hashCode();
        }
        if (hasSystemTime()) {
          hash = (37 * hash) + SYSTEMTIME_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              Double.doubleToLongBits(getSystemTime()));
        }
        if (hasSysMode()) {
          hash = (37 * hash) + SYSMODE_FIELD_NUMBER;
          hash = (53 * hash) + sysMode_;
        }
        if (hasInverterState()) {
          hash = (37 * hash) + INVERTERSTATE_FIELD_NUMBER;
          hash = (53 * hash) + inverterState_;
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Record parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Record parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Record parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Record parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Record parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Record parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Record parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Record parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Record parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Record parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Record parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Record parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Record prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @Override
      protected Builder newBuilderForType(
          BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code RecordSet.Record}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:RecordSet.Record)
          RecordOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return RecordSetProto.internal_static_RecordSet_Record_descriptor;
        }

        @Override
        protected FieldAccessorTable
            internalGetFieldAccessorTable() {
          return RecordSetProto.internal_static_RecordSet_Record_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Record.class, Builder.class);
        }

        // Construct using RecordSetProto.RecordSet.Record.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getChannelFieldBuilder();
          }
        }
        @Override
        public Builder clear() {
          super.clear();
          timestamp_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (channelBuilder_ == null) {
            channel_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            channelBuilder_.clear();
          }
          systemTime_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          sysMode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          inverterState_ = 0;
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return RecordSetProto.internal_static_RecordSet_Record_descriptor;
        }

        @Override
        public Record getDefaultInstanceForType() {
          return Record.getDefaultInstance();
        }

        @Override
        public Record build() {
          Record result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @Override
        public Record buildPartial() {
          Record result = new Record(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.timestamp_ = timestamp_;
            to_bitField0_ |= 0x00000001;
          }
          if (channelBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0)) {
              channel_ = java.util.Collections.unmodifiableList(channel_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.channel_ = channel_;
          } else {
            result.channel_ = channelBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.systemTime_ = systemTime_;
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            to_bitField0_ |= 0x00000004;
          }
          result.sysMode_ = sysMode_;
          if (((from_bitField0_ & 0x00000010) != 0)) {
            to_bitField0_ |= 0x00000008;
          }
          result.inverterState_ = inverterState_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @Override
        public Builder clone() {
          return super.clone();
        }
        @Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.setField(field, value);
        }
        @Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return super.addRepeatedField(field, value);
        }
        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Record) {
            return mergeFrom((Record)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Record other) {
          if (other == Record.getDefaultInstance()) return this;
          if (other.hasTimestamp()) {
            setTimestamp(other.getTimestamp());
          }
          if (channelBuilder_ == null) {
            if (!other.channel_.isEmpty()) {
              if (channel_.isEmpty()) {
                channel_ = other.channel_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureChannelIsMutable();
                channel_.addAll(other.channel_);
              }
              onChanged();
            }
          } else {
            if (!other.channel_.isEmpty()) {
              if (channelBuilder_.isEmpty()) {
                channelBuilder_.dispose();
                channelBuilder_ = null;
                channel_ = other.channel_;
                bitField0_ = (bitField0_ & ~0x00000002);
                channelBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getChannelFieldBuilder() : null;
              } else {
                channelBuilder_.addAllMessages(other.channel_);
              }
            }
          }
          if (other.hasSystemTime()) {
            setSystemTime(other.getSystemTime());
          }
          if (other.hasSysMode()) {
            setSysMode(other.getSysMode());
          }
          if (other.hasInverterState()) {
            setInverterState(other.getInverterState());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @Override
        public final boolean isInitialized() {
          return true;
        }

        @Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          Record parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (Record) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private double timestamp_ ;
        /**
         * <pre>
         * UTC timestamp (unix epoch) marking when this record was captured
         * </pre>
         *
         * <code>optional double timestamp = 1;</code>
         * @return Whether the timestamp field is set.
         */
        @Override
        public boolean hasTimestamp() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * UTC timestamp (unix epoch) marking when this record was captured
         * </pre>
         *
         * <code>optional double timestamp = 1;</code>
         * @return The timestamp.
         */
        @Override
        public double getTimestamp() {
          return timestamp_;
        }
        /**
         * <pre>
         * UTC timestamp (unix epoch) marking when this record was captured
         * </pre>
         *
         * <code>optional double timestamp = 1;</code>
         * @param value The timestamp to set.
         * @return This builder for chaining.
         */
        public Builder setTimestamp(double value) {
          bitField0_ |= 0x00000001;
          timestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * UTC timestamp (unix epoch) marking when this record was captured
         * </pre>
         *
         * <code>optional double timestamp = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000001);
          timestamp_ = 0D;
          onChanged();
          return this;
        }

        private java.util.List<ChannelSample> channel_ =
          java.util.Collections.emptyList();
        private void ensureChannelIsMutable() {
          if (!((bitField0_ & 0x00000002) != 0)) {
            channel_ = new java.util.ArrayList<ChannelSample>(channel_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            ChannelSample, ChannelSample.Builder, ChannelSampleOrBuilder> channelBuilder_;

        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public java.util.List<ChannelSample> getChannelList() {
          if (channelBuilder_ == null) {
            return java.util.Collections.unmodifiableList(channel_);
          } else {
            return channelBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public int getChannelCount() {
          if (channelBuilder_ == null) {
            return channel_.size();
          } else {
            return channelBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public ChannelSample getChannel(int index) {
          if (channelBuilder_ == null) {
            return channel_.get(index);
          } else {
            return channelBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder setChannel(
            int index, ChannelSample value) {
          if (channelBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureChannelIsMutable();
            channel_.set(index, value);
            onChanged();
          } else {
            channelBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder setChannel(
            int index, ChannelSample.Builder builderForValue) {
          if (channelBuilder_ == null) {
            ensureChannelIsMutable();
            channel_.set(index, builderForValue.build());
            onChanged();
          } else {
            channelBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder addChannel(ChannelSample value) {
          if (channelBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureChannelIsMutable();
            channel_.add(value);
            onChanged();
          } else {
            channelBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder addChannel(
            int index, ChannelSample value) {
          if (channelBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureChannelIsMutable();
            channel_.add(index, value);
            onChanged();
          } else {
            channelBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder addChannel(
            ChannelSample.Builder builderForValue) {
          if (channelBuilder_ == null) {
            ensureChannelIsMutable();
            channel_.add(builderForValue.build());
            onChanged();
          } else {
            channelBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder addChannel(
            int index, ChannelSample.Builder builderForValue) {
          if (channelBuilder_ == null) {
            ensureChannelIsMutable();
            channel_.add(index, builderForValue.build());
            onChanged();
          } else {
            channelBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder addAllChannel(
            Iterable<? extends ChannelSample> values) {
          if (channelBuilder_ == null) {
            ensureChannelIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, channel_);
            onChanged();
          } else {
            channelBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder clearChannel() {
          if (channelBuilder_ == null) {
            channel_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            channelBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public Builder removeChannel(int index) {
          if (channelBuilder_ == null) {
            ensureChannelIsMutable();
            channel_.remove(index);
            onChanged();
          } else {
            channelBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public ChannelSample.Builder getChannelBuilder(
            int index) {
          return getChannelFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public ChannelSampleOrBuilder getChannelOrBuilder(
            int index) {
          if (channelBuilder_ == null) {
            return channel_.get(index);  } else {
            return channelBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public java.util.List<? extends ChannelSampleOrBuilder>
             getChannelOrBuilderList() {
          if (channelBuilder_ != null) {
            return channelBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(channel_);
          }
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public ChannelSample.Builder addChannelBuilder() {
          return getChannelFieldBuilder().addBuilder(
              ChannelSample.getDefaultInstance());
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public ChannelSample.Builder addChannelBuilder(
            int index) {
          return getChannelFieldBuilder().addBuilder(
              index, ChannelSample.getDefaultInstance());
        }
        /**
         * <code>repeated .RecordSet.Record.ChannelSample channel = 2;</code>
         */
        public java.util.List<ChannelSample.Builder>
             getChannelBuilderList() {
          return getChannelFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            ChannelSample, ChannelSample.Builder, ChannelSampleOrBuilder>
            getChannelFieldBuilder() {
          if (channelBuilder_ == null) {
            channelBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                ChannelSample, ChannelSample.Builder, ChannelSampleOrBuilder>(
                    channel_,
                    ((bitField0_ & 0x00000002) != 0),
                    getParentForChildren(),
                    isClean());
            channel_ = null;
          }
          return channelBuilder_;
        }

        private double systemTime_ ;
        /**
         * <pre>
         * local system timestemp (arbitrary epoch) when this record was captured
         * </pre>
         *
         * <code>optional double systemTime = 5;</code>
         * @return Whether the systemTime field is set.
         */
        @Override
        public boolean hasSystemTime() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * local system timestemp (arbitrary epoch) when this record was captured
         * </pre>
         *
         * <code>optional double systemTime = 5;</code>
         * @return The systemTime.
         */
        @Override
        public double getSystemTime() {
          return systemTime_;
        }
        /**
         * <pre>
         * local system timestemp (arbitrary epoch) when this record was captured
         * </pre>
         *
         * <code>optional double systemTime = 5;</code>
         * @param value The systemTime to set.
         * @return This builder for chaining.
         */
        public Builder setSystemTime(double value) {
          bitField0_ |= 0x00000004;
          systemTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * local system timestemp (arbitrary epoch) when this record was captured
         * </pre>
         *
         * <code>optional double systemTime = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearSystemTime() {
          bitField0_ = (bitField0_ & ~0x00000004);
          systemTime_ = 0D;
          onChanged();
          return this;
        }

        private int sysMode_ = 0;
        /**
         * <pre>
         * Mode the inverter is in
         * </pre>
         *
         * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
         * @return Whether the sysMode field is set.
         */
        @Override public boolean hasSysMode() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * Mode the inverter is in
         * </pre>
         *
         * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
         * @return The sysMode.
         */
        @Override
        public SysModeType getSysMode() {
          @SuppressWarnings("deprecation")
          SysModeType result = SysModeType.valueOf(sysMode_);
          return result == null ? SysModeType.SAFETY_SHUTDOWN : result;
        }
        /**
         * <pre>
         * Mode the inverter is in
         * </pre>
         *
         * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
         * @param value The sysMode to set.
         * @return This builder for chaining.
         */
        public Builder setSysMode(SysModeType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000008;
          sysMode_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Mode the inverter is in
         * </pre>
         *
         * <code>optional .RecordSet.Record.SysModeType sysMode = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSysMode() {
          bitField0_ = (bitField0_ & ~0x00000008);
          sysMode_ = 0;
          onChanged();
          return this;
        }

        private int inverterState_ = 0;
        /**
         * <pre>
         * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
         * </pre>
         *
         * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
         * @return Whether the inverterState field is set.
         */
        @Override public boolean hasInverterState() {
          return ((bitField0_ & 0x00000010) != 0);
        }
        /**
         * <pre>
         * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
         * </pre>
         *
         * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
         * @return The inverterState.
         */
        @Override
        public InverterStateType getInverterState() {
          @SuppressWarnings("deprecation")
          InverterStateType result = InverterStateType.valueOf(inverterState_);
          return result == null ? InverterStateType.UNKNOWN : result;
        }
        /**
         * <pre>
         * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
         * </pre>
         *
         * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
         * @param value The inverterState to set.
         * @return This builder for chaining.
         */
        public Builder setInverterState(InverterStateType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000010;
          inverterState_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Islanding IFF inverterState == ISLANDED OR inverterState == GENERATOR_PARALLEL
         * </pre>
         *
         * <code>optional .RecordSet.Record.InverterStateType inverterState = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearInverterState() {
          bitField0_ = (bitField0_ & ~0x00000010);
          inverterState_ = 0;
          onChanged();
          return this;
        }
        @Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:RecordSet.Record)
      }

      // @@protoc_insertion_point(class_scope:RecordSet.Record)
      private static final Record DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Record();
      }

      public static Record getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @Deprecated public static final com.google.protobuf.Parser<Record>
          PARSER = new com.google.protobuf.AbstractParser<Record>() {
        @Override
        public Record parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Record(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Record> parser() {
        return PARSER;
      }

      @Override
      public com.google.protobuf.Parser<Record> getParserForType() {
        return PARSER;
      }

      @Override
      public Record getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int SENSORID_FIELD_NUMBER = 1;
    private volatile Object sensorId_;
    /**
     * <code>optional string sensorId = 1;</code>
     * @return Whether the sensorId field is set.
     */
    @Override
    public boolean hasSensorId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional string sensorId = 1;</code>
     * @return The sensorId.
     */
    @Override
    public String getSensorId() {
      Object ref = sensorId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          sensorId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string sensorId = 1;</code>
     * @return The bytes for sensorId.
     */
    @Override
    public com.google.protobuf.ByteString
        getSensorIdBytes() {
      Object ref = sensorId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sensorId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RECORD_FIELD_NUMBER = 2;
    private java.util.List<Record> record_;
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    @Override
    public java.util.List<Record> getRecordList() {
      return record_;
    }
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    @Override
    public java.util.List<? extends RecordOrBuilder>
        getRecordOrBuilderList() {
      return record_;
    }
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    @Override
    public int getRecordCount() {
      return record_.size();
    }
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    @Override
    public Record getRecord(int index) {
      return record_.get(index);
    }
    /**
     * <pre>
     * Server-side meta data:
     * </pre>
     *
     * <code>repeated .RecordSet.Record record = 2;</code>
     */
    @Override
    public RecordOrBuilder getRecordOrBuilder(
        int index) {
      return record_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, sensorId_);
      }
      for (int i = 0; i < record_.size(); i++) {
        output.writeMessage(2, record_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, sensorId_);
      }
      for (int i = 0; i < record_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, record_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof RecordSet)) {
        return super.equals(obj);
      }
      RecordSet other = (RecordSet) obj;

      if (hasSensorId() != other.hasSensorId()) return false;
      if (hasSensorId()) {
        if (!getSensorId()
            .equals(other.getSensorId())) return false;
      }
      if (!getRecordList()
          .equals(other.getRecordList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSensorId()) {
        hash = (37 * hash) + SENSORID_FIELD_NUMBER;
        hash = (53 * hash) + getSensorId().hashCode();
      }
      if (getRecordCount() > 0) {
        hash = (37 * hash) + RECORD_FIELD_NUMBER;
        hash = (53 * hash) + getRecordList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static RecordSet parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RecordSet parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RecordSet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RecordSet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RecordSet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static RecordSet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static RecordSet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RecordSet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static RecordSet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static RecordSet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static RecordSet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static RecordSet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(RecordSet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RecordSet
     * ///////////
     * </pre>
     *
     * Protobuf type {@code RecordSet}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RecordSet)
        RecordSetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return RecordSetProto.internal_static_RecordSet_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return RecordSetProto.internal_static_RecordSet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                RecordSet.class, Builder.class);
      }

      // Construct using RecordSetProto.RecordSet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRecordFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        sensorId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (recordBuilder_ == null) {
          record_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          recordBuilder_.clear();
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return RecordSetProto.internal_static_RecordSet_descriptor;
      }

      @Override
      public RecordSet getDefaultInstanceForType() {
        return RecordSet.getDefaultInstance();
      }

      @Override
      public RecordSet build() {
        RecordSet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public RecordSet buildPartial() {
        RecordSet result = new RecordSet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sensorId_ = sensorId_;
        if (recordBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            record_ = java.util.Collections.unmodifiableList(record_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.record_ = record_;
        } else {
          result.record_ = recordBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof RecordSet) {
          return mergeFrom((RecordSet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(RecordSet other) {
        if (other == RecordSet.getDefaultInstance()) return this;
        if (other.hasSensorId()) {
          bitField0_ |= 0x00000001;
          sensorId_ = other.sensorId_;
          onChanged();
        }
        if (recordBuilder_ == null) {
          if (!other.record_.isEmpty()) {
            if (record_.isEmpty()) {
              record_ = other.record_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureRecordIsMutable();
              record_.addAll(other.record_);
            }
            onChanged();
          }
        } else {
          if (!other.record_.isEmpty()) {
            if (recordBuilder_.isEmpty()) {
              recordBuilder_.dispose();
              recordBuilder_ = null;
              record_ = other.record_;
              bitField0_ = (bitField0_ & ~0x00000002);
              recordBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRecordFieldBuilder() : null;
            } else {
              recordBuilder_.addAllMessages(other.record_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        RecordSet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (RecordSet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private Object sensorId_ = "";
      /**
       * <code>optional string sensorId = 1;</code>
       * @return Whether the sensorId field is set.
       */
      public boolean hasSensorId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional string sensorId = 1;</code>
       * @return The sensorId.
       */
      public String getSensorId() {
        Object ref = sensorId_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            sensorId_ = s;
          }
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string sensorId = 1;</code>
       * @return The bytes for sensorId.
       */
      public com.google.protobuf.ByteString
          getSensorIdBytes() {
        Object ref = sensorId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          sensorId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string sensorId = 1;</code>
       * @param value The sensorId to set.
       * @return This builder for chaining.
       */
      public Builder setSensorId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        sensorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string sensorId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSensorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sensorId_ = getDefaultInstance().getSensorId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string sensorId = 1;</code>
       * @param value The bytes for sensorId to set.
       * @return This builder for chaining.
       */
      public Builder setSensorIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        sensorId_ = value;
        onChanged();
        return this;
      }

      private java.util.List<Record> record_ =
        java.util.Collections.emptyList();
      private void ensureRecordIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          record_ = new java.util.ArrayList<Record>(record_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          Record, Record.Builder, RecordOrBuilder> recordBuilder_;

      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public java.util.List<Record> getRecordList() {
        if (recordBuilder_ == null) {
          return java.util.Collections.unmodifiableList(record_);
        } else {
          return recordBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public int getRecordCount() {
        if (recordBuilder_ == null) {
          return record_.size();
        } else {
          return recordBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Record getRecord(int index) {
        if (recordBuilder_ == null) {
          return record_.get(index);
        } else {
          return recordBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder setRecord(
          int index, Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.set(index, value);
          onChanged();
        } else {
          recordBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder setRecord(
          int index, Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.set(index, builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder addRecord(Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.add(value);
          onChanged();
        } else {
          recordBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder addRecord(
          int index, Record value) {
        if (recordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRecordIsMutable();
          record_.add(index, value);
          onChanged();
        } else {
          recordBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder addRecord(
          Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.add(builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder addRecord(
          int index, Record.Builder builderForValue) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.add(index, builderForValue.build());
          onChanged();
        } else {
          recordBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder addAllRecord(
          Iterable<? extends Record> values) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, record_);
          onChanged();
        } else {
          recordBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder clearRecord() {
        if (recordBuilder_ == null) {
          record_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          recordBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Builder removeRecord(int index) {
        if (recordBuilder_ == null) {
          ensureRecordIsMutable();
          record_.remove(index);
          onChanged();
        } else {
          recordBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Record.Builder getRecordBuilder(
          int index) {
        return getRecordFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public RecordOrBuilder getRecordOrBuilder(
          int index) {
        if (recordBuilder_ == null) {
          return record_.get(index);  } else {
          return recordBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public java.util.List<? extends RecordOrBuilder>
           getRecordOrBuilderList() {
        if (recordBuilder_ != null) {
          return recordBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(record_);
        }
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Record.Builder addRecordBuilder() {
        return getRecordFieldBuilder().addBuilder(
            Record.getDefaultInstance());
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public Record.Builder addRecordBuilder(
          int index) {
        return getRecordFieldBuilder().addBuilder(
            index, Record.getDefaultInstance());
      }
      /**
       * <pre>
       * Server-side meta data:
       * </pre>
       *
       * <code>repeated .RecordSet.Record record = 2;</code>
       */
      public java.util.List<Record.Builder>
           getRecordBuilderList() {
        return getRecordFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          Record, Record.Builder, RecordOrBuilder>
          getRecordFieldBuilder() {
        if (recordBuilder_ == null) {
          recordBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              Record, Record.Builder, RecordOrBuilder>(
                  record_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          record_ = null;
        }
        return recordBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:RecordSet)
    }

    // @@protoc_insertion_point(class_scope:RecordSet)
    private static final RecordSet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RecordSet();
    }

    public static RecordSet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @Deprecated public static final com.google.protobuf.Parser<RecordSet>
        PARSER = new com.google.protobuf.AbstractParser<RecordSet>() {
      @Override
      public RecordSet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RecordSet(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RecordSet> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<RecordSet> getParserForType() {
      return PARSER;
    }

    @Override
    public RecordSet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RecordSet_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RecordSet_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RecordSet_Record_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RecordSet_Record_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RecordSet_Record_ChannelSample_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_RecordSet_Record_ChannelSample_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\017recordset.proto\"\344\014\n\tRecordSet\022\020\n\010senso" +
      "rId\030\001 \001(\t\022!\n\006record\030\002 \003(\0132\021.RecordSet.Re" +
      "cord\032\241\014\n\006Record\022\021\n\ttimestamp\030\001 \001(\001\0220\n\007ch" +
      "annel\030\002 \003(\0132\037.RecordSet.Record.ChannelSa" +
      "mple\022\022\n\nsystemTime\030\005 \001(\001\022.\n\007sysMode\030\003 \001(" +
      "\0162\035.RecordSet.Record.SysModeType\022:\n\rinve" +
      "rterState\030\004 \001(\0162#.RecordSet.Record.Inver" +
      "terStateType\032\245\006\n\rChannelSample\022\017\n\007channe" +
      "l\030\001 \001(\r\022@\n\013channelType\030\002 \001(\0162+.RecordSet" +
      ".Record.ChannelSample.ChannelType\022\031\n\021exp" +
      "ortedEnergy_Ws\030\003 \001(\004\022\031\n\021importedEnergy_W" +
      "s\030\004 \001(\004\022\021\n\tvoltage_V\030\005 \001(\002\022\031\n\021reactivePo" +
      "wer_VAR\030\006 \001(\021\022\023\n\013realPower_W\030\007 \001(\021\022!\n\031wi" +
      "debandReactivePower_VAR\030\010 \001(\r\022\020\n\010deviceI" +
      "d\030\t \001(\t\022>\n\ndeviceType\030\n \001(\0162*.RecordSet." +
      "Record.ChannelSample.DeviceType\022H\n\016aggre" +
      "gateLevel\030\013 \001(\01620.RecordSet.Record.Chann" +
      "elSample.AggregationLevel\022\013\n\003SoC\030\014 \001(\002\022\026" +
      "\n\016isRevenueGrade\030\r \001(\010\022\032\n\022reactivePower_" +
      "VARf\030\016 \001(\002\022\024\n\014realPower_Wf\030\017 \001(\002\022\r\n\005labe" +
      "l\030\020 \001(\t\"\245\001\n\013ChannelType\022\007\n\003NET\020\000\022\016\n\nGENE" +
      "RATION\020\001\022\017\n\013CONSUMPTION\020\002\022\027\n\023PHASE_A_CON" +
      "SUMPTION\020\003\022\027\n\023PHASE_B_CONSUMPTION\020\004\022\027\n\023P" +
      "HASE_C_CONSUMPTION\020\005\022\014\n\010SUBMETER\020\006\022\023\n\017IN" +
      "VERTER_OUTPUT\020\007\"N\n\nDeviceType\022\013\n\007BATTERY" +
      "\020\000\022\t\n\005SOLAR\020\001\022\014\n\010INVERTER\020\002\022\r\n\tGENERATOR" +
      "\020\003\022\013\n\007OCTOPUS\020\004\"+\n\020AggregationLevel\022\007\n\003R" +
      "AW\020\000\022\016\n\nAGGREGATED\020\001\"\210\001\n\013SysModeType\022\023\n\017" +
      "SAFETY_SHUTDOWN\020\000\022\014\n\010GRID_TIE\020\001\022\017\n\013SELF_" +
      "SUPPLY\020\002\022\020\n\014CLEAN_BACKUP\020\003\022\023\n\017PRIORITY_B" +
      "ACKUP\020\004\022\024\n\020REMOTE_ARBITRAGE\020\005\022\010\n\004SELL\020\006\"" +
      "\236\003\n\021InverterStateType\022\013\n\007UNKNOWN\020\000\022\014\n\010DI" +
      "SABLED\020\020\022\021\n\014INITIALIZING\020\200\002\022\020\n\013POWERING_" +
      "UP\020\220\002\022\023\n\016CONNECTING_BUS\020\240\002\022\020\n\013TESTING_BU" +
      "S\020\300\002\022\024\n\017LOW_BUS_VOLTAGE\020\200\004\022\014\n\007WAITING\020\220\006" +
      "\022\024\n\017CONNECTING_GRID\020\200\020\022\027\n\022DISCONNECTING_" +
      "GRID\020\220\020\022\023\n\016GRID_CONNECTED\020\240\020\022\r\n\010ISLANDED" +
      "\020\260\020\022\027\n\022GENERATOR_PARALLEL\020\320\020\022\023\n\rERROR_GE" +
      "NERIC\020\200\340\001\022\027\n\021ERROR_REBUS_FAULT\020\220\352\001\022\036\n\030ER" +
      "ROR_INTERNAL_BUS_FAULT\020\240\352\001\022\031\n\023CONFIGURAT" +
      "ION_ERROR\020\200\356\001\022\025\n\017BAD_RESET_ERROR\020\220\356\001\022\022\n\014" +
      "GROUND_FAULT\020\200\200\003B\020B\016RecordSetProto"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_RecordSet_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_RecordSet_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RecordSet_descriptor,
        new String[] { "SensorId", "Record", });
    internal_static_RecordSet_Record_descriptor =
      internal_static_RecordSet_descriptor.getNestedTypes().get(0);
    internal_static_RecordSet_Record_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RecordSet_Record_descriptor,
        new String[] { "Timestamp", "Channel", "SystemTime", "SysMode", "InverterState", });
    internal_static_RecordSet_Record_ChannelSample_descriptor =
      internal_static_RecordSet_Record_descriptor.getNestedTypes().get(0);
    internal_static_RecordSet_Record_ChannelSample_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_RecordSet_Record_ChannelSample_descriptor,
        new String[] { "Channel", "ChannelType", "ExportedEnergyWs", "ImportedEnergyWs", "VoltageV", "ReactivePowerVAR", "RealPowerW", "WidebandReactivePowerVAR", "DeviceId", "DeviceType", "AggregateLevel", "SoC", "IsRevenueGrade", "ReactivePowerVARf", "RealPowerWf", "Label", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
